// Code generated by protoc-gen-go.
// source: events.proto
// DO NOT EDIT!

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	EventSubmittedResponse
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fortifi_events "github.com/fortifi/proto-go/ftypes/events"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventSubmittedResponse struct {
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (m *EventSubmittedResponse) Reset()                    { *m = EventSubmittedResponse{} }
func (m *EventSubmittedResponse) String() string            { return proto.CompactTextString(m) }
func (*EventSubmittedResponse) ProtoMessage()               {}
func (*EventSubmittedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventSubmittedResponse) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSubmittedResponse)(nil), "events.EventSubmittedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	FireViewed(ctx context.Context, in *fortifi_events.ViewedEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireOpened(ctx context.Context, in *fortifi_events.OpenedEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireImpression(ctx context.Context, in *fortifi_events.ImpressionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireLink(ctx context.Context, in *fortifi_events.LinkEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireConversion(ctx context.Context, in *fortifi_events.ConversionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireInstallation(ctx context.Context, in *fortifi_events.InstallationEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireCommunication(ctx context.Context, in *fortifi_events.CommunicationEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireSubscription(ctx context.Context, in *fortifi_events.SubscriptionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireRateEntity(ctx context.Context, in *fortifi_events.EntityRateEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireSignup(ctx context.Context, in *fortifi_events.SignupEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireSearch(ctx context.Context, in *fortifi_events.SearchEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireAction(ctx context.Context, in *fortifi_events.ActionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireBillingAgreement(ctx context.Context, in *fortifi_events.BillingAgreementEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FirePurchase(ctx context.Context, in *fortifi_events.PurchaseEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireRefund(ctx context.Context, in *fortifi_events.RefundEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireDispute(ctx context.Context, in *fortifi_events.DisputeEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
	FireSocial(ctx context.Context, in *fortifi_events.SocialEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) FireViewed(ctx context.Context, in *fortifi_events.ViewedEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireViewed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireOpened(ctx context.Context, in *fortifi_events.OpenedEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireOpened", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireImpression(ctx context.Context, in *fortifi_events.ImpressionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireImpression", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireLink(ctx context.Context, in *fortifi_events.LinkEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireConversion(ctx context.Context, in *fortifi_events.ConversionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireConversion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireInstallation(ctx context.Context, in *fortifi_events.InstallationEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireInstallation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireCommunication(ctx context.Context, in *fortifi_events.CommunicationEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireCommunication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireSubscription(ctx context.Context, in *fortifi_events.SubscriptionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireRateEntity(ctx context.Context, in *fortifi_events.EntityRateEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireRateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireSignup(ctx context.Context, in *fortifi_events.SignupEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireSignup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireSearch(ctx context.Context, in *fortifi_events.SearchEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireAction(ctx context.Context, in *fortifi_events.ActionEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireBillingAgreement(ctx context.Context, in *fortifi_events.BillingAgreementEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireBillingAgreement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FirePurchase(ctx context.Context, in *fortifi_events.PurchaseEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FirePurchase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireRefund(ctx context.Context, in *fortifi_events.RefundEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireRefund", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireDispute(ctx context.Context, in *fortifi_events.DisputeEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireDispute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FireSocial(ctx context.Context, in *fortifi_events.SocialEvent, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireSocial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Events service

type EventsServer interface {
	FireViewed(context.Context, *fortifi_events.ViewedEvent) (*EventSubmittedResponse, error)
	FireOpened(context.Context, *fortifi_events.OpenedEvent) (*EventSubmittedResponse, error)
	FireImpression(context.Context, *fortifi_events.ImpressionEvent) (*EventSubmittedResponse, error)
	FireLink(context.Context, *fortifi_events.LinkEvent) (*EventSubmittedResponse, error)
	FireConversion(context.Context, *fortifi_events.ConversionEvent) (*EventSubmittedResponse, error)
	FireInstallation(context.Context, *fortifi_events.InstallationEvent) (*EventSubmittedResponse, error)
	FireCommunication(context.Context, *fortifi_events.CommunicationEvent) (*EventSubmittedResponse, error)
	FireSubscription(context.Context, *fortifi_events.SubscriptionEvent) (*EventSubmittedResponse, error)
	FireRateEntity(context.Context, *fortifi_events.EntityRateEvent) (*EventSubmittedResponse, error)
	FireSignup(context.Context, *fortifi_events.SignupEvent) (*EventSubmittedResponse, error)
	FireSearch(context.Context, *fortifi_events.SearchEvent) (*EventSubmittedResponse, error)
	FireAction(context.Context, *fortifi_events.ActionEvent) (*EventSubmittedResponse, error)
	FireBillingAgreement(context.Context, *fortifi_events.BillingAgreementEvent) (*EventSubmittedResponse, error)
	FirePurchase(context.Context, *fortifi_events.PurchaseEvent) (*EventSubmittedResponse, error)
	FireRefund(context.Context, *fortifi_events.RefundEvent) (*EventSubmittedResponse, error)
	FireDispute(context.Context, *fortifi_events.DisputeEvent) (*EventSubmittedResponse, error)
	FireSocial(context.Context, *fortifi_events.SocialEvent) (*EventSubmittedResponse, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_FireViewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.ViewedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireViewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireViewed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireViewed(ctx, req.(*fortifi_events.ViewedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireOpened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.OpenedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireOpened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireOpened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireOpened(ctx, req.(*fortifi_events.OpenedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.ImpressionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireImpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireImpression(ctx, req.(*fortifi_events.ImpressionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.LinkEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireLink(ctx, req.(*fortifi_events.LinkEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.ConversionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireConversion(ctx, req.(*fortifi_events.ConversionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.InstallationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireInstallation(ctx, req.(*fortifi_events.InstallationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.CommunicationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireCommunication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireCommunication(ctx, req.(*fortifi_events.CommunicationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.SubscriptionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireSubscription(ctx, req.(*fortifi_events.SubscriptionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireRateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.EntityRateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireRateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireRateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireRateEntity(ctx, req.(*fortifi_events.EntityRateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.SignupEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireSignup(ctx, req.(*fortifi_events.SignupEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.SearchEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireSearch(ctx, req.(*fortifi_events.SearchEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.ActionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireAction(ctx, req.(*fortifi_events.ActionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireBillingAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.BillingAgreementEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireBillingAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireBillingAgreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireBillingAgreement(ctx, req.(*fortifi_events.BillingAgreementEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FirePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.PurchaseEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FirePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FirePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FirePurchase(ctx, req.(*fortifi_events.PurchaseEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.RefundEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireRefund(ctx, req.(*fortifi_events.RefundEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.DisputeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireDispute(ctx, req.(*fortifi_events.DisputeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FireSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fortifi_events.SocialEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireSocial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireSocial(ctx, req.(*fortifi_events.SocialEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireViewed",
			Handler:    _Events_FireViewed_Handler,
		},
		{
			MethodName: "FireOpened",
			Handler:    _Events_FireOpened_Handler,
		},
		{
			MethodName: "FireImpression",
			Handler:    _Events_FireImpression_Handler,
		},
		{
			MethodName: "FireLink",
			Handler:    _Events_FireLink_Handler,
		},
		{
			MethodName: "FireConversion",
			Handler:    _Events_FireConversion_Handler,
		},
		{
			MethodName: "FireInstallation",
			Handler:    _Events_FireInstallation_Handler,
		},
		{
			MethodName: "FireCommunication",
			Handler:    _Events_FireCommunication_Handler,
		},
		{
			MethodName: "FireSubscription",
			Handler:    _Events_FireSubscription_Handler,
		},
		{
			MethodName: "FireRateEntity",
			Handler:    _Events_FireRateEntity_Handler,
		},
		{
			MethodName: "FireSignup",
			Handler:    _Events_FireSignup_Handler,
		},
		{
			MethodName: "FireSearch",
			Handler:    _Events_FireSearch_Handler,
		},
		{
			MethodName: "FireAction",
			Handler:    _Events_FireAction_Handler,
		},
		{
			MethodName: "FireBillingAgreement",
			Handler:    _Events_FireBillingAgreement_Handler,
		},
		{
			MethodName: "FirePurchase",
			Handler:    _Events_FirePurchase_Handler,
		},
		{
			MethodName: "FireRefund",
			Handler:    _Events_FireRefund_Handler,
		},
		{
			MethodName: "FireDispute",
			Handler:    _Events_FireDispute_Handler,
		},
		{
			MethodName: "FireSocial",
			Handler:    _Events_FireSocial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0xd4, 0xdd, 0x8a, 0xd4, 0x30,
	0x14, 0x07, 0x70, 0xf6, 0x66, 0x5c, 0xe3, 0x22, 0x1a, 0x45, 0xdc, 0xf5, 0x7b, 0x50, 0xf0, 0xc6,
	0x0e, 0xb8, 0x4f, 0xb0, 0xa3, 0x23, 0x0c, 0x2a, 0x6a, 0x07, 0x15, 0x04, 0x91, 0x7e, 0x9c, 0x76,
	0x0e, 0xb6, 0x49, 0xc8, 0xc7, 0xc8, 0x3c, 0xa9, 0xaf, 0x23, 0x49, 0x3a, 0x4c, 0x69, 0x2b, 0x24,
	0x97, 0xf9, 0x9f, 0xd3, 0x5f, 0x4f, 0xd2, 0x12, 0x72, 0x06, 0x3b, 0x60, 0x5a, 0x25, 0x42, 0x72,
	0xcd, 0xe9, 0xcc, 0xaf, 0x2e, 0xee, 0x54, 0x7a, 0x2f, 0x40, 0x2d, 0xfa, 0xc5, 0xf9, 0x25, 0xb9,
	0xb7, 0xb2, 0xeb, 0x8d, 0xc9, 0x5b, 0xd4, 0x1a, 0xca, 0x14, 0x94, 0xe0, 0x4c, 0x01, 0x3d, 0x27,
	0xa7, 0xae, 0xf3, 0x17, 0x96, 0xf7, 0x4f, 0x9e, 0x9e, 0xbc, 0xbc, 0x9e, 0x5e, 0x73, 0xeb, 0x75,
	0xf9, 0xfa, 0x2f, 0x21, 0x33, 0xf7, 0x94, 0xa2, 0x6b, 0x42, 0xde, 0xa1, 0x84, 0x6f, 0x08, 0x7f,
	0xa0, 0xa4, 0x0f, 0x92, 0x8a, 0x4b, 0x8d, 0x15, 0x26, 0xdd, 0x4b, 0x7c, 0xee, 0x7a, 0x2f, 0x1e,
	0x1f, 0xc2, 0xff, 0xbc, 0xb0, 0xa3, 0x3e, 0x09, 0x60, 0x53, 0x94, 0xcf, 0xc3, 0xa8, 0x2f, 0xe4,
	0xa6, 0xa5, 0xd6, 0xad, 0x90, 0xa0, 0x14, 0x72, 0x46, 0x9f, 0x0c, 0xb9, 0x63, 0x2d, 0x8c, 0x5c,
	0x91, 0x53, 0x4b, 0x7e, 0x40, 0xf6, 0x9b, 0x9e, 0x0f, 0x31, 0x9b, 0x46, 0x4d, 0xf6, 0x86, 0xb3,
	0x1d, 0xc8, 0xe9, 0xc9, 0x8e, 0xb5, 0x30, 0xf2, 0x2b, 0xb9, 0xe5, 0x36, 0xcb, 0x94, 0xce, 0x9a,
	0x26, 0xd3, 0x16, 0x7d, 0x36, 0xda, 0x6e, 0xaf, 0x1a, 0xc6, 0x7e, 0x27, 0xb7, 0xfd, 0xa4, 0x6d,
	0x6b, 0x18, 0x16, 0xde, 0x9d, 0x8f, 0x87, 0xed, 0x95, 0xa3, 0xe6, 0xdd, 0x98, 0x5c, 0x15, 0x12,
	0xc5, 0xf4, 0xbc, 0xfd, 0x6a, 0xd4, 0xc9, 0xa6, 0x99, 0x86, 0x15, 0xd3, 0xa8, 0xf7, 0xe3, 0x93,
	0xf5, 0xb9, 0xeb, 0x88, 0xf9, 0x23, 0x37, 0x58, 0x33, 0x23, 0xc6, 0x7f, 0xa4, 0xcf, 0xe3, 0x28,
	0xc8, 0x64, 0xb1, 0x9d, 0xa0, 0x5c, 0x1e, 0x45, 0x5d, 0x15, 0xee, 0xe4, 0x46, 0x94, 0xcf, 0xc3,
	0xa8, 0x9f, 0xe4, 0xae, 0xa5, 0x96, 0xd8, 0x34, 0xc8, 0xea, 0xab, 0x5a, 0x02, 0xb4, 0xc0, 0x34,
	0x7d, 0x31, 0x44, 0x87, 0x1d, 0x61, 0xfc, 0x47, 0x72, 0x66, 0xf9, 0xcf, 0x46, 0x16, 0xdb, 0x4c,
	0x01, 0x7d, 0x34, 0x64, 0x0f, 0x95, 0xa8, 0x8d, 0xa7, 0x50, 0x19, 0x36, 0x71, 0x41, 0xf8, 0x3c,
	0x8c, 0x7a, 0x4f, 0x6e, 0x58, 0xea, 0x2d, 0x2a, 0x61, 0x34, 0xd0, 0x87, 0x43, 0xab, 0x2b, 0xc4,
	0x7d, 0x5b, 0x5e, 0x60, 0xd6, 0x4c, 0x7c, 0x5b, 0x97, 0x07, 0x51, 0xcb, 0xe7, 0x3f, 0xe6, 0x35,
	0xea, 0xad, 0xc9, 0x93, 0x82, 0xb7, 0x8b, 0x0e, 0x5a, 0xb8, 0xab, 0xfa, 0x55, 0xcd, 0xbb, 0xab,
	0x3b, 0x9f, 0xb9, 0xe0, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xc5, 0x32, 0x62, 0xe8,
	0x05, 0x00, 0x00,
}
