// Code generated by protoc-gen-go.
// source: metaroute.proto
// DO NOT EDIT!

/*
Package metaroute is a generated protocol buffer package.

It is generated from these files:
	metaroute.proto

It has these top-level messages:
	HTTPRequest
	HTTPResponse
*/
package metaroute

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HTTPRequest struct {
	Host        string                                `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Path        string                                `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Method      string                                `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	PostParams  map[string]*HTTPRequest_HTTPParameter `protobuf:"bytes,4,rep,name=post_params,json=postParams" json:"post_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Querystring string                                `protobuf:"bytes,5,opt,name=querystring" json:"querystring,omitempty"`
	Headers     map[string]*HTTPRequest_HTTPParameter `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body        string                                `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Language    string                                `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
	ContentType string                                `protobuf:"bytes,9,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Customer    *HTTPRequest_CustomerInformation      `protobuf:"bytes,10,opt,name=customer" json:"customer,omitempty"`
}

func (m *HTTPRequest) Reset()                    { *m = HTTPRequest{} }
func (m *HTTPRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest) ProtoMessage()               {}
func (*HTTPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HTTPRequest) GetPostParams() map[string]*HTTPRequest_HTTPParameter {
	if m != nil {
		return m.PostParams
	}
	return nil
}

func (m *HTTPRequest) GetHeaders() map[string]*HTTPRequest_HTTPParameter {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPRequest) GetCustomer() *HTTPRequest_CustomerInformation {
	if m != nil {
		return m.Customer
	}
	return nil
}

type HTTPRequest_HTTPParameter struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HTTPRequest_HTTPParameter) Reset()                    { *m = HTTPRequest_HTTPParameter{} }
func (m *HTTPRequest_HTTPParameter) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest_HTTPParameter) ProtoMessage()               {}
func (*HTTPRequest_HTTPParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type HTTPRequest_CustomerInformation struct {
	BrandId      string            `protobuf:"bytes,1,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
	CustomerFid  string            `protobuf:"bytes,2,opt,name=customer_fid,json=customerFid" json:"customer_fid,omitempty"`
	CustomerName string            `protobuf:"bytes,3,opt,name=customer_name,json=customerName" json:"customer_name,omitempty"`
	Meta         map[string]string `protobuf:"bytes,4,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPRequest_CustomerInformation) Reset()         { *m = HTTPRequest_CustomerInformation{} }
func (m *HTTPRequest_CustomerInformation) String() string { return proto.CompactTextString(m) }
func (*HTTPRequest_CustomerInformation) ProtoMessage()    {}
func (*HTTPRequest_CustomerInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3}
}

func (m *HTTPRequest_CustomerInformation) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type HTTPResponse struct {
	StatusCode  int32                                        `protobuf:"varint,1,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Body        string                                       `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	ContentType string                                       `protobuf:"bytes,3,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Language    string                                       `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Headers     map[string]*HTTPResponse_HTTPHeaderParameter `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPResponse) Reset()                    { *m = HTTPResponse{} }
func (m *HTTPResponse) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponse) ProtoMessage()               {}
func (*HTTPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HTTPResponse) GetHeaders() map[string]*HTTPResponse_HTTPHeaderParameter {
	if m != nil {
		return m.Headers
	}
	return nil
}

type HTTPResponse_HTTPHeaderParameter struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HTTPResponse_HTTPHeaderParameter) Reset()         { *m = HTTPResponse_HTTPHeaderParameter{} }
func (m *HTTPResponse_HTTPHeaderParameter) String() string { return proto.CompactTextString(m) }
func (*HTTPResponse_HTTPHeaderParameter) ProtoMessage()    {}
func (*HTTPResponse_HTTPHeaderParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func init() {
	proto.RegisterType((*HTTPRequest)(nil), "metaroute.HTTPRequest")
	proto.RegisterType((*HTTPRequest_HTTPParameter)(nil), "metaroute.HTTPRequest.HTTPParameter")
	proto.RegisterType((*HTTPRequest_CustomerInformation)(nil), "metaroute.HTTPRequest.CustomerInformation")
	proto.RegisterType((*HTTPResponse)(nil), "metaroute.HTTPResponse")
	proto.RegisterType((*HTTPResponse_HTTPHeaderParameter)(nil), "metaroute.HTTPResponse.HTTPHeaderParameter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MetaRoute service

type MetaRouteClient interface {
	HandleHTTPRequest(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error)
}

type metaRouteClient struct {
	cc *grpc.ClientConn
}

func NewMetaRouteClient(cc *grpc.ClientConn) MetaRouteClient {
	return &metaRouteClient{cc}
}

func (c *metaRouteClient) HandleHTTPRequest(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error) {
	out := new(HTTPResponse)
	err := grpc.Invoke(ctx, "/metaroute.MetaRoute/HandleHTTPRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaRoute service

type MetaRouteServer interface {
	HandleHTTPRequest(context.Context, *HTTPRequest) (*HTTPResponse, error)
}

func RegisterMetaRouteServer(s *grpc.Server, srv MetaRouteServer) {
	s.RegisterService(&_MetaRoute_serviceDesc, srv)
}

func _MetaRoute_HandleHTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRouteServer).HandleHTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metaroute.MetaRoute/HandleHTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRouteServer).HandleHTTPRequest(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metaroute.MetaRoute",
	HandlerType: (*MetaRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleHTTPRequest",
			Handler:    _MetaRoute_HandleHTTPRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("metaroute.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0xbf, 0xdb, 0x9b, 0x4d, 0x03, 0x0f, 0x8d, 0x90, 0x17, 0xca, 0x06, 0x6c, 0x02, 0xad,
	0x95, 0x0a, 0x12, 0x68, 0x12, 0x48, 0x30, 0x18, 0xdd, 0x03, 0xa8, 0x44, 0x7d, 0xe2, 0xa5, 0xb8,
	0x8d, 0x9b, 0x46, 0xb4, 0x71, 0xb0, 0x1d, 0xa4, 0xbe, 0xf1, 0x3b, 0xf9, 0x2b, 0xbc, 0xe0, 0x2f,
	0x32, 0xd3, 0x0f, 0x8d, 0x97, 0xbd, 0xd9, 0xc7, 0xe7, 0xfa, 0x5c, 0x9f, 0x7b, 0x12, 0xd8, 0x5b,
	0x10, 0x81, 0x19, 0xcd, 0x05, 0xe9, 0x64, 0x8c, 0x0a, 0x8a, 0x5a, 0x05, 0x70, 0xf8, 0xb3, 0x01,
	0x5e, 0x7f, 0x38, 0x1c, 0x84, 0xe4, 0x7b, 0x4e, 0xb8, 0x40, 0x08, 0xaa, 0x33, 0xca, 0x85, 0x5f,
	0x6a, 0x97, 0x4e, 0x5a, 0xa1, 0x5e, 0x2b, 0x2c, 0xc3, 0x62, 0xe6, 0x97, 0x0d, 0xa6, 0xd6, 0xe8,
	0x00, 0xea, 0xf2, 0x92, 0x19, 0x8d, 0xfc, 0x8a, 0x46, 0xed, 0x0e, 0x7d, 0x00, 0x2f, 0x93, 0x35,
	0xa3, 0x0c, 0x33, 0xbc, 0xe0, 0x7e, 0xb5, 0x5d, 0x39, 0xf1, 0x7a, 0x8f, 0x3b, 0x57, 0x1d, 0x38,
	0x62, 0x9d, 0x81, 0x64, 0x0e, 0x34, 0xf1, 0x7d, 0x2a, 0xd8, 0x32, 0x84, 0xac, 0x00, 0x50, 0x1b,
	0x3c, 0x49, 0x62, 0x4b, 0x2e, 0x58, 0x92, 0xc6, 0x7e, 0x4d, 0xab, 0xb8, 0x10, 0x7a, 0x05, 0x8d,
	0x19, 0xc1, 0x11, 0x61, 0xdc, 0xaf, 0x6b, 0x99, 0xa3, 0x2d, 0x32, 0x7d, 0xc3, 0x32, 0x1a, 0x7f,
	0x6b, 0xd4, 0xab, 0xc6, 0x34, 0x5a, 0xfa, 0x0d, 0xf3, 0x2a, 0xb5, 0x46, 0x01, 0x34, 0xe7, 0x38,
	0x8d, 0x73, 0x1c, 0x13, 0xbf, 0xa9, 0xf1, 0x62, 0x8f, 0x1e, 0xc0, 0xce, 0x84, 0xa6, 0x82, 0xa4,
	0x62, 0x24, 0x96, 0x19, 0xf1, 0x5b, 0xa6, 0x23, 0x8b, 0x0d, 0x25, 0x84, 0x2e, 0xa0, 0x39, 0xc9,
	0xb9, 0xa0, 0x0b, 0xc2, 0x7c, 0x90, 0xc7, 0x5e, 0xef, 0xc9, 0x96, 0x96, 0xce, 0x2d, 0xed, 0x32,
	0x9d, 0x52, 0xb6, 0xc0, 0x22, 0xa1, 0x69, 0x58, 0xd4, 0x06, 0xc7, 0xb0, 0xab, 0xc8, 0xda, 0x09,
	0x22, 0x08, 0x53, 0x6e, 0xff, 0xc0, 0x73, 0x59, 0x29, 0xe7, 0x52, 0x51, 0x6e, 0x9b, 0x5d, 0x30,
	0x81, 0xbd, 0x15, 0x0f, 0xd1, 0x2d, 0xa8, 0x7c, 0x23, 0x4b, 0x3b, 0x3f, 0xb5, 0x44, 0x67, 0x50,
	0xd3, 0x74, 0x3d, 0x3f, 0xaf, 0xf7, 0x70, 0x9b, 0x4b, 0xae, 0x62, 0x68, 0x4a, 0xce, 0xca, 0x2f,
	0x4b, 0xc1, 0x57, 0xd8, 0x71, 0x1d, 0xbc, 0x01, 0x85, 0xdf, 0x25, 0xd8, 0xdf, 0xe0, 0x08, 0xba,
	0x07, 0xcd, 0x31, 0xc3, 0x69, 0x34, 0x4a, 0x22, 0x2b, 0xd7, 0xd0, 0xfb, 0xcb, 0x48, 0x4f, 0xc3,
	0x56, 0x8c, 0xa6, 0xf2, 0xb8, 0x6c, 0xa7, 0x61, 0xb1, 0x8b, 0x24, 0x42, 0x47, 0xb0, 0x5b, 0x50,
	0x52, 0x29, 0x6a, 0x93, 0x5a, 0xd4, 0x7d, 0x92, 0x18, 0xea, 0x43, 0x55, 0x35, 0x6b, 0x83, 0xfa,
	0xfc, 0xff, 0xc7, 0xd5, 0xf9, 0x28, 0x99, 0x26, 0x52, 0xfa, 0x86, 0xe0, 0x05, 0xb4, 0x0a, 0x68,
	0x83, 0x47, 0x77, 0x5c, 0x8f, 0x5a, 0xce, 0xeb, 0x0f, 0x7f, 0x95, 0xa5, 0xc1, 0x5a, 0x8c, 0x67,
	0x34, 0xe5, 0x04, 0xdd, 0x07, 0x8f, 0x0b, 0x2c, 0x72, 0x3e, 0x9a, 0xd0, 0x88, 0xe8, 0x4b, 0x6a,
	0x21, 0x18, 0xe8, 0x5c, 0x22, 0x45, 0x74, 0xcb, 0x4e, 0x74, 0x57, 0xe3, 0x59, 0x59, 0x8f, 0xa7,
	0x9b, 0xee, 0xea, 0x4a, 0xba, 0x5f, 0x5f, 0x7d, 0x4c, 0x35, 0x6d, 0xc5, 0xfa, 0x10, 0x4d, 0x77,
	0x9b, 0xbf, 0xa6, 0xe0, 0x14, 0xf6, 0x15, 0xcb, 0x1c, 0x5e, 0x1f, 0xdc, 0xf8, 0xda, 0x4c, 0xbd,
	0xf9, 0x37, 0x53, 0x4f, 0xb7, 0xb6, 0xb3, 0xae, 0xea, 0x98, 0xdb, 0xfb, 0x6c, 0xa6, 0x12, 0xaa,
	0x42, 0xf4, 0x0e, 0x6e, 0xf7, 0x65, 0x7c, 0xe6, 0xc4, 0xfd, 0xe3, 0x1d, 0x6c, 0x9e, 0x79, 0x70,
	0x77, 0x8b, 0xe2, 0xdb, 0xe3, 0x2f, 0x8f, 0xe2, 0x44, 0xcc, 0xf2, 0x71, 0x67, 0x42, 0x17, 0x5d,
	0x19, 0x08, 0x91, 0x4c, 0x93, 0xae, 0xfe, 0xb3, 0x9e, 0xc6, 0xb4, 0x5b, 0x54, 0x8d, 0xeb, 0x1a,
	0x7b, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xee, 0x79, 0x23, 0x83, 0x80, 0x05, 0x00, 0x00,
}
