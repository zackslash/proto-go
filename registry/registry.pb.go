// Code generated by protoc-gen-go.
// source: registry.proto
// DO NOT EDIT!

/*
Package registry is a generated protocol buffer package.

Where Organisations/Users get hitched to apps

It is generated from these files:
	registry.proto

It has these top-level messages:
	Relationship
	JoinRequest
	TrustModeRequest
	PermissionsRequest
	ConfigureRequest
	Configuration
	AppPermission
	AppItem
	BoolResponse
	AppItemRequest
	RelationshipRequest
	RelationshipData
	RelationshipsResponse
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Permission int32

const (
	Permission_DENY  Permission = 0
	Permission_ALLOW Permission = 1
)

var Permission_name = map[int32]string{
	0: "DENY",
	1: "ALLOW",
}
var Permission_value = map[string]int32{
	"DENY":  0,
	"ALLOW": 1,
}

func (x Permission) String() string {
	return proto.EnumName(Permission_name, int32(x))
}
func (Permission) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Visibility int32

const (
	Visibility_HIDE      Visibility = 0
	Visibility_SHOW      Visibility = 1
	Visibility_AVAILABLE Visibility = 2
)

var Visibility_name = map[int32]string{
	0: "HIDE",
	1: "SHOW",
	2: "AVAILABLE",
}
var Visibility_value = map[string]int32{
	"HIDE":      0,
	"SHOW":      1,
	"AVAILABLE": 2,
}

func (x Visibility) String() string {
	return proto.EnumName(Visibility_name, int32(x))
}
func (Visibility) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TrustMode int32

const (
	TrustMode_WHITELIST TrustMode = 0
	TrustMode_BLACKLIST TrustMode = 1
)

var TrustMode_name = map[int32]string{
	0: "WHITELIST",
	1: "BLACKLIST",
}
var TrustMode_value = map[string]int32{
	"WHITELIST": 0,
	"BLACKLIST": 1,
}

func (x TrustMode) String() string {
	return proto.EnumName(TrustMode_name, int32(x))
}
func (TrustMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Relationship struct {
	OrganisationId string `protobuf:"bytes,1,opt,name=organisation_id,json=organisationId" json:"organisation_id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GlobalAppId    string `protobuf:"bytes,3,opt,name=global_app_id,json=globalAppId" json:"global_app_id,omitempty"`
}

func (m *Relationship) Reset()                    { *m = Relationship{} }
func (m *Relationship) String() string            { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()               {}
func (*Relationship) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JoinRequest struct {
	Relationship *Relationship    `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	TrustMode    TrustMode        `protobuf:"varint,2,opt,name=trust_mode,json=trustMode,enum=registry.TrustMode" json:"trust_mode,omitempty"`
	Permissions  []*AppPermission `protobuf:"bytes,3,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JoinRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *JoinRequest) GetPermissions() []*AppPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type TrustModeRequest struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	TrustMode    TrustMode     `protobuf:"varint,2,opt,name=trust_mode,json=trustMode,enum=registry.TrustMode" json:"trust_mode,omitempty"`
}

func (m *TrustModeRequest) Reset()                    { *m = TrustModeRequest{} }
func (m *TrustModeRequest) String() string            { return proto.CompactTextString(m) }
func (*TrustModeRequest) ProtoMessage()               {}
func (*TrustModeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TrustModeRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

type PermissionsRequest struct {
	Relationship *Relationship    `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	Permissions  []*AppPermission `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *PermissionsRequest) Reset()                    { *m = PermissionsRequest{} }
func (m *PermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*PermissionsRequest) ProtoMessage()               {}
func (*PermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PermissionsRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *PermissionsRequest) GetPermissions() []*AppPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type ConfigureRequest struct {
	Relationship *Relationship    `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	Items        []*Configuration `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigureRequest) Reset()                    { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()               {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigureRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *ConfigureRequest) GetItems() []*Configuration {
	if m != nil {
		return m.Items
	}
	return nil
}

type Configuration struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AppPermission struct {
	Id         string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Permission Permission `protobuf:"varint,2,opt,name=permission,enum=registry.Permission" json:"permission,omitempty"`
}

func (m *AppPermission) Reset()                    { *m = AppPermission{} }
func (m *AppPermission) String() string            { return proto.CompactTextString(m) }
func (*AppPermission) ProtoMessage()               {}
func (*AppPermission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AppItem struct {
	Id         string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Visibility Visibility `protobuf:"varint,2,opt,name=visibility,enum=registry.Visibility" json:"visibility,omitempty"`
}

func (m *AppItem) Reset()                    { *m = AppItem{} }
func (m *AppItem) String() string            { return proto.CompactTextString(m) }
func (*AppItem) ProtoMessage()               {}
func (*AppItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type BoolResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *BoolResponse) Reset()                    { *m = BoolResponse{} }
func (m *BoolResponse) String() string            { return proto.CompactTextString(m) }
func (*BoolResponse) ProtoMessage()               {}
func (*BoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type AppItemRequest struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	Items        []*AppItem    `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *AppItemRequest) Reset()                    { *m = AppItemRequest{} }
func (m *AppItemRequest) String() string            { return proto.CompactTextString(m) }
func (*AppItemRequest) ProtoMessage()               {}
func (*AppItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AppItemRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *AppItemRequest) GetItems() []*AppItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type RelationshipRequest struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	WithData     bool          `protobuf:"varint,2,opt,name=with_data,json=withData" json:"with_data,omitempty"`
}

func (m *RelationshipRequest) Reset()                    { *m = RelationshipRequest{} }
func (m *RelationshipRequest) String() string            { return proto.CompactTextString(m) }
func (*RelationshipRequest) ProtoMessage()               {}
func (*RelationshipRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RelationshipRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

type RelationshipData struct {
	Relationship       *Relationship    `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	TrustMode          TrustMode        `protobuf:"varint,2,opt,name=trust_mode,json=trustMode,enum=registry.TrustMode" json:"trust_mode,omitempty"`
	Permissions        []*AppPermission `protobuf:"bytes,3,rep,name=permissions" json:"permissions,omitempty"`
	Configuration      []*Configuration `protobuf:"bytes,4,rep,name=configuration" json:"configuration,omitempty"`
	Navigation         []*AppItem       `protobuf:"bytes,5,rep,name=navigation" json:"navigation,omitempty"`
	QuickActions       []*AppItem       `protobuf:"bytes,6,rep,name=quick_actions,json=quickActions" json:"quick_actions,omitempty"`
	SearchActions      []*AppItem       `protobuf:"bytes,7,rep,name=search_actions,json=searchActions" json:"search_actions,omitempty"`
	Queues             []*AppItem       `protobuf:"bytes,8,rep,name=queues" json:"queues,omitempty"`
	Notifications      []*AppItem       `protobuf:"bytes,9,rep,name=notifications" json:"notifications,omitempty"`
	PanelIntegrations  []*AppItem       `protobuf:"bytes,10,rep,name=panel_integrations,json=panelIntegrations" json:"panel_integrations,omitempty"`
	MenuIntegrations   []*AppItem       `protobuf:"bytes,11,rep,name=menu_integrations,json=menuIntegrations" json:"menu_integrations,omitempty"`
	ActionIntegrations []*AppItem       `protobuf:"bytes,12,rep,name=action_integrations,json=actionIntegrations" json:"action_integrations,omitempty"`
}

func (m *RelationshipData) Reset()                    { *m = RelationshipData{} }
func (m *RelationshipData) String() string            { return proto.CompactTextString(m) }
func (*RelationshipData) ProtoMessage()               {}
func (*RelationshipData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RelationshipData) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *RelationshipData) GetPermissions() []*AppPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *RelationshipData) GetConfiguration() []*Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *RelationshipData) GetNavigation() []*AppItem {
	if m != nil {
		return m.Navigation
	}
	return nil
}

func (m *RelationshipData) GetQuickActions() []*AppItem {
	if m != nil {
		return m.QuickActions
	}
	return nil
}

func (m *RelationshipData) GetSearchActions() []*AppItem {
	if m != nil {
		return m.SearchActions
	}
	return nil
}

func (m *RelationshipData) GetQueues() []*AppItem {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *RelationshipData) GetNotifications() []*AppItem {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *RelationshipData) GetPanelIntegrations() []*AppItem {
	if m != nil {
		return m.PanelIntegrations
	}
	return nil
}

func (m *RelationshipData) GetMenuIntegrations() []*AppItem {
	if m != nil {
		return m.MenuIntegrations
	}
	return nil
}

func (m *RelationshipData) GetActionIntegrations() []*AppItem {
	if m != nil {
		return m.ActionIntegrations
	}
	return nil
}

type RelationshipsResponse struct {
	Relationships []*RelationshipData `protobuf:"bytes,1,rep,name=relationships" json:"relationships,omitempty"`
}

func (m *RelationshipsResponse) Reset()                    { *m = RelationshipsResponse{} }
func (m *RelationshipsResponse) String() string            { return proto.CompactTextString(m) }
func (*RelationshipsResponse) ProtoMessage()               {}
func (*RelationshipsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RelationshipsResponse) GetRelationships() []*RelationshipData {
	if m != nil {
		return m.Relationships
	}
	return nil
}

func init() {
	proto.RegisterType((*Relationship)(nil), "registry.Relationship")
	proto.RegisterType((*JoinRequest)(nil), "registry.JoinRequest")
	proto.RegisterType((*TrustModeRequest)(nil), "registry.TrustModeRequest")
	proto.RegisterType((*PermissionsRequest)(nil), "registry.PermissionsRequest")
	proto.RegisterType((*ConfigureRequest)(nil), "registry.ConfigureRequest")
	proto.RegisterType((*Configuration)(nil), "registry.Configuration")
	proto.RegisterType((*AppPermission)(nil), "registry.AppPermission")
	proto.RegisterType((*AppItem)(nil), "registry.AppItem")
	proto.RegisterType((*BoolResponse)(nil), "registry.BoolResponse")
	proto.RegisterType((*AppItemRequest)(nil), "registry.AppItemRequest")
	proto.RegisterType((*RelationshipRequest)(nil), "registry.RelationshipRequest")
	proto.RegisterType((*RelationshipData)(nil), "registry.RelationshipData")
	proto.RegisterType((*RelationshipsResponse)(nil), "registry.RelationshipsResponse")
	proto.RegisterEnum("registry.Permission", Permission_name, Permission_value)
	proto.RegisterEnum("registry.Visibility", Visibility_name, Visibility_value)
	proto.RegisterEnum("registry.TrustMode", TrustMode_name, TrustMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Registry service

type RegistryClient interface {
	Install(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	Uninstall(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*BoolResponse, error)
	Activate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*BoolResponse, error)
	Deactivate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*BoolResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetPermissions(ctx context.Context, in *PermissionsRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetTrustMode(ctx context.Context, in *TrustModeRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetNavigation(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetQuickActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetSearchActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetQueues(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetNotifications(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetPanelIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetMenuIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	SetActionIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetRelationships(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipsResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Install(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Install", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Uninstall(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Uninstall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Activate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Deactivate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Deactivate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetPermissions(ctx context.Context, in *PermissionsRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetTrustMode(ctx context.Context, in *TrustModeRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetTrustMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetNavigation(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetNavigation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetQuickActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetQuickActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetSearchActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetSearchActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetQueues(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetQueues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetNotifications(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetPanelIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetPanelIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetMenuIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetMenuIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetActionIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetActionIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetRelationships(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipsResponse, error) {
	out := new(RelationshipsResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/GetRelationships", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	Install(context.Context, *JoinRequest) (*BoolResponse, error)
	Uninstall(context.Context, *Relationship) (*BoolResponse, error)
	Activate(context.Context, *Relationship) (*BoolResponse, error)
	Deactivate(context.Context, *Relationship) (*BoolResponse, error)
	Configure(context.Context, *ConfigureRequest) (*BoolResponse, error)
	SetPermissions(context.Context, *PermissionsRequest) (*BoolResponse, error)
	SetTrustMode(context.Context, *TrustModeRequest) (*BoolResponse, error)
	SetNavigation(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetQuickActions(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetSearchActions(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetQueues(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetNotifications(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetPanelIntegrations(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetMenuIntegrations(context.Context, *AppItemRequest) (*BoolResponse, error)
	SetActionIntegrations(context.Context, *AppItemRequest) (*BoolResponse, error)
	GetRelationships(context.Context, *RelationshipRequest) (*RelationshipsResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Install(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Uninstall(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Activate(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Deactivate(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetPermissions(ctx, req.(*PermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetTrustMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetTrustMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetTrustMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetTrustMode(ctx, req.(*TrustModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetNavigation(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetQuickActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetQuickActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetQuickActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetQuickActions(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetSearchActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetSearchActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetSearchActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetSearchActions(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetQueues(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetNotifications(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetPanelIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetPanelIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetPanelIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetPanelIntegrations(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetMenuIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetMenuIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetMenuIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetMenuIntegrations(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetActionIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetActionIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetActionIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetActionIntegrations(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetRelationships(ctx, req.(*RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _Registry_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Registry_Uninstall_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Registry_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _Registry_Deactivate_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Registry_Configure_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _Registry_SetPermissions_Handler,
		},
		{
			MethodName: "SetTrustMode",
			Handler:    _Registry_SetTrustMode_Handler,
		},
		{
			MethodName: "SetNavigation",
			Handler:    _Registry_SetNavigation_Handler,
		},
		{
			MethodName: "SetQuickActions",
			Handler:    _Registry_SetQuickActions_Handler,
		},
		{
			MethodName: "SetSearchActions",
			Handler:    _Registry_SetSearchActions_Handler,
		},
		{
			MethodName: "SetQueues",
			Handler:    _Registry_SetQueues_Handler,
		},
		{
			MethodName: "SetNotifications",
			Handler:    _Registry_SetNotifications_Handler,
		},
		{
			MethodName: "SetPanelIntegrations",
			Handler:    _Registry_SetPanelIntegrations_Handler,
		},
		{
			MethodName: "SetMenuIntegrations",
			Handler:    _Registry_SetMenuIntegrations_Handler,
		},
		{
			MethodName: "SetActionIntegrations",
			Handler:    _Registry_SetActionIntegrations_Handler,
		},
		{
			MethodName: "GetRelationships",
			Handler:    _Registry_GetRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x57, 0x5d, 0x73, 0xdb, 0x44,
	0x14, 0xc5, 0x69, 0x1d, 0x4b, 0xd7, 0x96, 0xab, 0x6c, 0x12, 0xea, 0x09, 0x30, 0x80, 0x5e, 0x4a,
	0x33, 0x43, 0x19, 0xc2, 0x77, 0xa1, 0x50, 0x39, 0x0e, 0x8d, 0xc0, 0x4d, 0x41, 0x49, 0xdb, 0xe9,
	0x93, 0x47, 0xb1, 0xb7, 0xce, 0x0e, 0xb2, 0xa4, 0x6a, 0x57, 0x61, 0xfa, 0xc0, 0x0b, 0xaf, 0xfc,
	0x21, 0xfe, 0x03, 0xc3, 0x7f, 0x62, 0x77, 0x25, 0x4b, 0xbb, 0xb1, 0x45, 0xc6, 0x99, 0xcc, 0x30,
	0x3c, 0x45, 0xbb, 0xf7, 0x9c, 0xb3, 0x77, 0xf7, 0xde, 0x3d, 0x1b, 0x43, 0x37, 0xc5, 0x53, 0x42,
	0x59, 0xfa, 0xfa, 0x5e, 0x92, 0xc6, 0x2c, 0x46, 0xc6, 0x7c, 0xec, 0x30, 0xe8, 0xf8, 0x38, 0x0c,
	0x18, 0x89, 0x23, 0x7a, 0x46, 0x12, 0x74, 0x07, 0x6e, 0xc5, 0xe9, 0x34, 0x88, 0x08, 0x95, 0x73,
	0x23, 0x32, 0xe9, 0x35, 0xde, 0x6b, 0x7c, 0x60, 0xfa, 0x5d, 0x75, 0xda, 0x9b, 0xa0, 0xdb, 0xd0,
	0xca, 0x28, 0x4e, 0x05, 0x60, 0x4d, 0x02, 0xd6, 0xc5, 0x90, 0x07, 0x1c, 0xb0, 0xa6, 0x61, 0x7c,
	0x1a, 0x84, 0xa3, 0x20, 0x49, 0x44, 0xf8, 0x86, 0x0c, 0xb7, 0xf3, 0x49, 0x37, 0x49, 0xbc, 0x89,
	0xf3, 0x67, 0x03, 0xda, 0x3f, 0xc4, 0x24, 0xf2, 0xf1, 0xab, 0x0c, 0x53, 0x86, 0xee, 0x43, 0x27,
	0x55, 0xb2, 0x90, 0x4b, 0xb6, 0xf7, 0xde, 0xbc, 0x57, 0xa6, 0xad, 0xe6, 0xe8, 0x6b, 0x58, 0xb4,
	0x07, 0xc0, 0xd2, 0x8c, 0xb2, 0xd1, 0x2c, 0x9e, 0x60, 0x99, 0x4b, 0x77, 0x6f, 0xb3, 0x62, 0x9e,
	0x88, 0xd8, 0x63, 0x1e, 0xf2, 0x4d, 0x36, 0xff, 0x44, 0x5f, 0x41, 0x3b, 0xc1, 0xe9, 0x8c, 0x50,
	0x2a, 0x54, 0x78, 0x86, 0x37, 0xf8, 0x72, 0xb7, 0x2b, 0x12, 0xcf, 0xf2, 0xa7, 0x32, 0xee, 0xab,
	0x58, 0xe7, 0xf7, 0x06, 0xd8, 0x95, 0xe6, 0x7f, 0x93, 0xbf, 0xf3, 0x47, 0x03, 0x50, 0x95, 0x20,
	0xbd, 0x8e, 0x34, 0x2e, 0x1c, 0xc9, 0xda, 0x0a, 0x47, 0xf2, 0x1b, 0xd8, 0xfb, 0x71, 0xf4, 0x92,
	0x4c, 0xb3, 0xf4, 0x5a, 0x4e, 0xe4, 0x43, 0x68, 0x12, 0x86, 0x67, 0x4b, 0x92, 0x98, 0x2f, 0x23,
	0xb1, 0x7e, 0x8e, 0x72, 0x3e, 0x03, 0x4b, 0x9b, 0x47, 0x5d, 0x58, 0x2b, 0xdb, 0x96, 0x7f, 0xa1,
	0x2d, 0x68, 0x9e, 0x07, 0x61, 0x86, 0x8b, 0x46, 0xcd, 0x07, 0xce, 0x53, 0xb0, 0xb4, 0x3d, 0x2d,
	0xd0, 0x3e, 0x05, 0xa8, 0x76, 0x59, 0x14, 0x66, 0xab, 0xca, 0x45, 0x39, 0x0d, 0x05, 0xe7, 0x3c,
	0x81, 0x96, 0xe8, 0x71, 0x9e, 0xd9, 0x32, 0xc1, 0x73, 0x42, 0xc9, 0x29, 0x09, 0x09, 0x7b, 0xbd,
	0x28, 0xf8, 0xac, 0x8c, 0xf9, 0x0a, 0xce, 0xe9, 0x43, 0xa7, 0x1f, 0xc7, 0xa1, 0x8f, 0x69, 0xc2,
	0xcf, 0x07, 0xa3, 0x1e, 0xb4, 0x68, 0x36, 0x1e, 0x63, 0x4a, 0xa5, 0xb4, 0xe1, 0xcf, 0x87, 0x22,
	0x32, 0xe3, 0x7f, 0x83, 0xe9, 0x7c, 0xa7, 0xf3, 0xa1, 0x93, 0x41, 0xb7, 0x48, 0xea, 0x3a, 0xea,
	0x73, 0x47, 0xaf, 0xcf, 0x86, 0xd6, 0x24, 0x72, 0x91, 0xa2, 0x32, 0x11, 0x6c, 0x6a, 0x32, 0xd7,
	0xb0, 0xf6, 0x5b, 0x60, 0xfe, 0x4a, 0xd8, 0xd9, 0x68, 0x12, 0xb0, 0x40, 0xee, 0xd2, 0xf0, 0x0d,
	0x31, 0x31, 0xe0, 0x63, 0xe7, 0xaf, 0x26, 0xd8, 0x2a, 0x57, 0x4c, 0xfe, 0x8f, 0xbc, 0x05, 0x3d,
	0x00, 0x6b, 0xac, 0x76, 0x72, 0xef, 0xe6, 0xbf, 0x5f, 0x00, 0x1d, 0x8d, 0x3e, 0x06, 0x88, 0x82,
	0x73, 0x32, 0xcd, 0xb9, 0xcd, 0xba, 0xe2, 0x28, 0x20, 0xf4, 0x39, 0x58, 0xaf, 0x32, 0x32, 0xfe,
	0x65, 0x14, 0x8c, 0xe5, 0xa6, 0x7b, 0xeb, 0x75, 0xac, 0x8e, 0xc4, 0xb9, 0x39, 0x0c, 0x7d, 0x09,
	0x5d, 0x8a, 0x83, 0x74, 0x7c, 0x56, 0x12, 0x5b, 0x75, 0x44, 0x2b, 0x07, 0xce, 0x99, 0x77, 0x61,
	0x9d, 0x77, 0x01, 0xef, 0x83, 0x9e, 0x51, 0xc7, 0x28, 0x00, 0xe8, 0x0b, 0xb0, 0xa2, 0x98, 0x91,
	0x97, 0x64, 0x9c, 0x57, 0xa4, 0x67, 0xd6, 0xae, 0xa1, 0xe1, 0xd0, 0x43, 0x40, 0x49, 0x10, 0xe1,
	0x70, 0x44, 0x22, 0x86, 0xa7, 0x69, 0xc1, 0x86, 0x3a, 0xf6, 0x86, 0x04, 0x7b, 0x0a, 0x16, 0x7d,
	0x0b, 0x1b, 0x33, 0x1c, 0x65, 0xba, 0x40, 0xbb, 0x4e, 0xc0, 0x16, 0x58, 0x8d, 0xdf, 0x87, 0xcd,
	0xfc, 0x60, 0x74, 0x85, 0x4e, 0x9d, 0x02, 0xca, 0xd1, 0xaa, 0x86, 0xf3, 0x02, 0xb6, 0xd5, 0xd6,
	0xa4, 0xa5, 0x03, 0x3c, 0x04, 0x4b, 0xed, 0x52, 0xe1, 0x03, 0x42, 0x76, 0x67, 0x79, 0x4b, 0x8b,
	0x4b, 0xe0, 0xeb, 0x84, 0xdd, 0xf7, 0x01, 0x14, 0xe3, 0x33, 0xe0, 0xe6, 0xe0, 0xe0, 0xe8, 0x85,
	0xfd, 0x06, 0x32, 0xa1, 0xe9, 0x0e, 0x87, 0x4f, 0x9e, 0xdb, 0x8d, 0xdd, 0x8f, 0x00, 0x2a, 0x43,
	0x12, 0x90, 0x43, 0x6f, 0x70, 0xc0, 0x21, 0xfc, 0xeb, 0xf8, 0x50, 0x20, 0x90, 0x05, 0xa6, 0xfb,
	0xcc, 0xf5, 0x86, 0x6e, 0x7f, 0x78, 0x60, 0xaf, 0xed, 0xde, 0x05, 0xb3, 0xbc, 0x0f, 0x22, 0xf6,
	0xfc, 0xd0, 0x3b, 0x39, 0x18, 0x7a, 0xc7, 0x27, 0x9c, 0xc4, 0x87, 0xfd, 0xa1, 0xbb, 0xff, 0xa3,
	0x1c, 0x36, 0xf6, 0xfe, 0x36, 0xc0, 0xf0, 0x8b, 0x5c, 0x79, 0x2b, 0xb5, 0xbc, 0x88, 0xb2, 0x20,
	0x0c, 0xd1, 0x76, 0xb5, 0x03, 0xe5, 0xbf, 0x83, 0x1d, 0xe5, 0xae, 0x6a, 0x4e, 0xf8, 0x35, 0x98,
	0x4f, 0x23, 0x52, 0x70, 0x6b, 0x2e, 0x74, 0x2d, 0xf9, 0x3e, 0x18, 0xa2, 0x25, 0xcf, 0x03, 0x86,
	0x57, 0xe6, 0x7e, 0x03, 0x30, 0xc0, 0xc1, 0x55, 0xd9, 0xdf, 0x81, 0x59, 0x3e, 0x97, 0x68, 0x67,
	0xf1, 0x6e, 0xe3, 0xcb, 0xf6, 0xfd, 0x3d, 0x74, 0x8f, 0x31, 0x53, 0xde, 0x7f, 0xf4, 0xf6, 0xb2,
	0x67, 0x89, 0x5e, 0xa6, 0xc3, 0x5f, 0x16, 0xae, 0x53, 0x15, 0x6d, 0x67, 0x99, 0xb3, 0x5d, 0xa2,
	0xe1, 0x82, 0xc5, 0x35, 0x8e, 0x2a, 0x47, 0xe9, 0x2d, 0x36, 0xf7, 0x25, 0x12, 0xfb, 0x70, 0x8b,
	0x4b, 0xfc, 0xac, 0xda, 0xcb, 0xea, 0x22, 0x03, 0xb0, 0xb9, 0xc8, 0xb1, 0x66, 0x35, 0xab, 0xab,
	0x3c, 0x00, 0x53, 0xa6, 0x22, 0xed, 0xe7, 0xaa, 0x49, 0x1c, 0x69, 0x5e, 0xb4, 0xba, 0xca, 0x21,
	0x6c, 0x89, 0xf2, 0x2e, 0x78, 0xd2, 0xea, 0x4a, 0x8f, 0x60, 0x93, 0x2b, 0x3d, 0xbe, 0x68, 0x4e,
	0xab, 0x0b, 0x79, 0xb0, 0xcd, 0x85, 0xdc, 0x05, 0x8f, 0xba, 0x82, 0x94, 0x0f, 0xf6, 0x23, 0xcc,
	0x34, 0x63, 0x43, 0xef, 0xd4, 0x3c, 0xc6, 0x85, 0xd4, 0xbb, 0xcb, 0xc3, 0xa5, 0x21, 0x9e, 0xae,
	0xcb, 0x5f, 0x35, 0x9f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xec, 0xbb, 0x8b, 0x45, 0xe7, 0x0c,
	0x00, 0x00,
}
