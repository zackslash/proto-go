// Code generated by protoc-gen-go.
// source: imperium.proto
// DO NOT EDIT!

/*
Package imperium is a generated protocol buffer package.

It is generated from these files:
	imperium.proto

It has these top-level messages:
	CertificateRequest
	CertificateResponse
*/
package imperium

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CertificateRequest struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *CertificateRequest) Reset()                    { *m = CertificateRequest{} }
func (m *CertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*CertificateRequest) ProtoMessage()               {}
func (*CertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CertificateResponse struct {
	Certificate     string                     `protobuf:"bytes,1,opt,name=certificate" json:"certificate,omitempty"`
	PrivateKey      string                     `protobuf:"bytes,2,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	RootCertificate string                     `protobuf:"bytes,3,opt,name=root_certificate,json=rootCertificate" json:"root_certificate,omitempty"`
	Hostname        string                     `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	ExpiryTime      *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime" json:"expiry_time,omitempty"`
}

func (m *CertificateResponse) Reset()                    { *m = CertificateResponse{} }
func (m *CertificateResponse) String() string            { return proto.CompactTextString(m) }
func (*CertificateResponse) ProtoMessage()               {}
func (*CertificateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CertificateResponse) GetExpiryTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiryTime
	}
	return nil
}

func init() {
	proto.RegisterType((*CertificateRequest)(nil), "imperium.CertificateRequest")
	proto.RegisterType((*CertificateResponse)(nil), "imperium.CertificateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Imperium service

type ImperiumClient interface {
	Request(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
}

type imperiumClient struct {
	cc *grpc.ClientConn
}

func NewImperiumClient(cc *grpc.ClientConn) ImperiumClient {
	return &imperiumClient{cc}
}

func (c *imperiumClient) Request(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := grpc.Invoke(ctx, "/imperium.Imperium/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Imperium service

type ImperiumServer interface {
	Request(context.Context, *CertificateRequest) (*CertificateResponse, error)
}

func RegisterImperiumServer(s *grpc.Server, srv ImperiumServer) {
	s.RegisterService(&_Imperium_serviceDesc, srv)
}

func _Imperium_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImperiumServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imperium.Imperium/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImperiumServer).Request(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Imperium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imperium.Imperium",
	HandlerType: (*ImperiumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Imperium_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("imperium.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x51, 0x4b, 0xb4, 0x40,
	0x14, 0x40, 0xd9, 0xef, 0x6b, 0x37, 0xbb, 0x42, 0xc5, 0x44, 0x20, 0x52, 0xec, 0xb2, 0x44, 0x14,
	0xd1, 0x08, 0xdb, 0x63, 0x6f, 0x05, 0xc1, 0xd2, 0x9b, 0xf4, 0xd4, 0x8b, 0xa8, 0x7b, 0x75, 0x87,
	0x9a, 0xbd, 0xd3, 0x38, 0x46, 0xfe, 0xd7, 0x7e, 0x4c, 0x3a, 0xea, 0x66, 0x44, 0x6f, 0xde, 0x73,
	0xcf, 0x28, 0x9e, 0x81, 0x7d, 0x21, 0x15, 0x6a, 0x51, 0x4a, 0xae, 0x34, 0x19, 0x62, 0x4e, 0x3f,
	0xfb, 0xd3, 0x9c, 0x28, 0x7f, 0xc5, 0xc0, 0xf2, 0xa4, 0xcc, 0x02, 0x23, 0x24, 0x16, 0x26, 0x96,
	0xaa, 0x55, 0xe7, 0x57, 0xc0, 0xee, 0x51, 0x1b, 0x91, 0x89, 0x34, 0x36, 0x18, 0xe2, 0x5b, 0x59,
	0xaf, 0xd9, 0x31, 0x4c, 0x62, 0xa5, 0x22, 0xb1, 0xf2, 0x46, 0xb3, 0xd1, 0xc5, 0x5e, 0x38, 0xae,
	0xa7, 0xe5, 0x6a, 0xfe, 0x39, 0x82, 0xa3, 0x1f, 0x76, 0xa1, 0x68, 0x53, 0x20, 0x9b, 0x81, 0x9b,
	0x7e, 0xe3, 0xee, 0xcc, 0x10, 0xb1, 0x29, 0xb8, 0x4a, 0x8b, 0xf7, 0xfa, 0x31, 0x7a, 0xc1, 0xca,
	0xfb, 0x67, 0x0d, 0xe8, 0xd0, 0x23, 0x56, 0xec, 0x12, 0x0e, 0x35, 0x91, 0x89, 0x86, 0xef, 0xf9,
	0x6f, 0xad, 0x83, 0x86, 0x0f, 0xbe, 0xca, 0x7c, 0x70, 0xd6, 0x54, 0x98, 0x4d, 0x2c, 0xd1, 0xdb,
	0xb1, 0xca, 0x76, 0x66, 0xb7, 0xe0, 0xe2, 0x87, 0x12, 0xba, 0x8a, 0x9a, 0x1f, 0xf5, 0xc6, 0xf5,
	0xda, 0x5d, 0xf8, 0xbc, 0xad, 0xc0, 0xfb, 0x0a, 0xfc, 0xa9, 0xaf, 0x10, 0x42, 0xab, 0x37, 0x60,
	0x11, 0x82, 0xb3, 0xec, 0xc2, 0xb1, 0x07, 0xd8, 0xed, 0x63, 0x9c, 0xf0, 0x6d, 0xde, 0xdf, 0xa9,
	0xfc, 0xd3, 0x3f, 0xb6, 0x6d, 0x9a, 0xbb, 0xf3, 0xe7, 0xb3, 0x5c, 0x98, 0x75, 0x99, 0xf0, 0x94,
	0x64, 0x90, 0x91, 0x35, 0xda, 0xeb, 0xb8, 0xce, 0x29, 0xe8, 0xcf, 0x26, 0x13, 0x8b, 0x6e, 0xbe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x77, 0x93, 0x1d, 0xcb, 0x01, 0x00, 0x00,
}
