// Code generated by protoc-gen-go.
// source: domains.proto
// DO NOT EDIT!

/*
Package domains is a generated protocol buffer package.

It is generated from these files:
	domains.proto

It has these top-level messages:
	LookupRequest
	GetDomainsRequest
	CreateRequest
	DomainResponse
	DomainsResponse
	VerifyRequest
	DomainServiceResponse
	SetServiceRequest
	ServiceRequest
	DomainServicesResponse
*/
package domains

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VerificationMode int32

const (
	VerificationMode_DNS    VerificationMode = 0
	VerificationMode_FILE   VerificationMode = 1
	VerificationMode_MANUAL VerificationMode = 2
)

var VerificationMode_name = map[int32]string{
	0: "DNS",
	1: "FILE",
	2: "MANUAL",
}
var VerificationMode_value = map[string]int32{
	"DNS":    0,
	"FILE":   1,
	"MANUAL": 2,
}

func (x VerificationMode) String() string {
	return proto.EnumName(VerificationMode_name, int32(x))
}
func (VerificationMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DomainServiceType int32

const (
	DomainServiceType_SUPPORT_PORTAL            DomainServiceType = 0
	DomainServiceType_COMMUNICATION_PREFERENCES DomainServiceType = 1
	DomainServiceType_CUSTOMER_PORTAL           DomainServiceType = 2
	DomainServiceType_SHORT_URL                 DomainServiceType = 3
	DomainServiceType_REFERRAL_TRACKING         DomainServiceType = 4
	DomainServiceType_PUBLISHER_PORTAL          DomainServiceType = 5
	DomainServiceType_LIVE_CHAT                 DomainServiceType = 6
)

var DomainServiceType_name = map[int32]string{
	0: "SUPPORT_PORTAL",
	1: "COMMUNICATION_PREFERENCES",
	2: "CUSTOMER_PORTAL",
	3: "SHORT_URL",
	4: "REFERRAL_TRACKING",
	5: "PUBLISHER_PORTAL",
	6: "LIVE_CHAT",
}
var DomainServiceType_value = map[string]int32{
	"SUPPORT_PORTAL":            0,
	"COMMUNICATION_PREFERENCES": 1,
	"CUSTOMER_PORTAL":           2,
	"SHORT_URL":                 3,
	"REFERRAL_TRACKING":         4,
	"PUBLISHER_PORTAL":          5,
	"LIVE_CHAT":                 6,
}

func (x DomainServiceType) String() string {
	return proto.EnumName(DomainServiceType_name, int32(x))
}
func (DomainServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DomainServiceSchema int32

const (
	DomainServiceSchema_HTTP  DomainServiceSchema = 0
	DomainServiceSchema_HTTPS DomainServiceSchema = 1
)

var DomainServiceSchema_name = map[int32]string{
	0: "HTTP",
	1: "HTTPS",
}
var DomainServiceSchema_value = map[string]int32{
	"HTTP":  0,
	"HTTPS": 1,
}

func (x DomainServiceSchema) String() string {
	return proto.EnumName(DomainServiceSchema_name, int32(x))
}
func (DomainServiceSchema) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LookupRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetDomainsRequest struct {
	BrandId string `protobuf:"bytes,1,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
}

func (m *GetDomainsRequest) Reset()                    { *m = GetDomainsRequest{} }
func (m *GetDomainsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDomainsRequest) ProtoMessage()               {}
func (*GetDomainsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateRequest struct {
	Domain  string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	BrandId string `protobuf:"bytes,2,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DomainResponse struct {
	Domain           string                     `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	BrandId          string                     `protobuf:"bytes,2,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
	Verification     string                     `protobuf:"bytes,3,opt,name=verification" json:"verification,omitempty"`
	VerificationMode string                     `protobuf:"bytes,4,opt,name=verification_mode,json=verificationMode" json:"verification_mode,omitempty"`
	IsVerified       string                     `protobuf:"bytes,5,opt,name=is_verified,json=isVerified" json:"is_verified,omitempty"`
	DateVerified     *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=date_verified,json=dateVerified" json:"date_verified,omitempty"`
	Language         string                     `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	Country          string                     `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
}

func (m *DomainResponse) Reset()                    { *m = DomainResponse{} }
func (m *DomainResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainResponse) ProtoMessage()               {}
func (*DomainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DomainResponse) GetDateVerified() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateVerified
	}
	return nil
}

type DomainsResponse struct {
	Domains map[string]*DomainResponse `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DomainsResponse) Reset()                    { *m = DomainsResponse{} }
func (m *DomainsResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainsResponse) ProtoMessage()               {}
func (*DomainsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DomainsResponse) GetDomains() map[string]*DomainResponse {
	if m != nil {
		return m.Domains
	}
	return nil
}

type VerifyRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *VerifyRequest) Reset()                    { *m = VerifyRequest{} }
func (m *VerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyRequest) ProtoMessage()               {}
func (*VerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DomainServiceResponse struct {
	Domain         string                `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Subdomain      string                `protobuf:"bytes,2,opt,name=subdomain" json:"subdomain,omitempty"`
	Type           DomainServiceType     `protobuf:"varint,3,opt,name=type,enum=domains.DomainServiceType" json:"type,omitempty"`
	IsEnabled      bool                  `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	BaseUrl        string                `protobuf:"bytes,5,opt,name=base_url,json=baseUrl" json:"base_url,omitempty"`
	DefaultSchema  DomainServiceSchema   `protobuf:"varint,6,opt,name=default_schema,json=defaultSchema,enum=domains.DomainServiceSchema" json:"default_schema,omitempty"`
	AvailbleSchema []DomainServiceSchema `protobuf:"varint,7,rep,name=availble_schema,json=availbleSchema,enum=domains.DomainServiceSchema" json:"availble_schema,omitempty"`
}

func (m *DomainServiceResponse) Reset()                    { *m = DomainServiceResponse{} }
func (m *DomainServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainServiceResponse) ProtoMessage()               {}
func (*DomainServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SetServiceRequest struct {
	Domain    string            `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Subdomain string            `protobuf:"bytes,2,opt,name=subdomain" json:"subdomain,omitempty"`
	Type      DomainServiceType `protobuf:"varint,3,opt,name=type,enum=domains.DomainServiceType" json:"type,omitempty"`
}

func (m *SetServiceRequest) Reset()                    { *m = SetServiceRequest{} }
func (m *SetServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*SetServiceRequest) ProtoMessage()               {}
func (*SetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ServiceRequest struct {
	Domain string            `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Type   DomainServiceType `protobuf:"varint,2,opt,name=type,enum=domains.DomainServiceType" json:"type,omitempty"`
}

func (m *ServiceRequest) Reset()                    { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()               {}
func (*ServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DomainServicesResponse struct {
	Services map[string]*DomainServiceResponse `protobuf:"bytes,1,rep,name=services" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DomainServicesResponse) Reset()                    { *m = DomainServicesResponse{} }
func (m *DomainServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainServicesResponse) ProtoMessage()               {}
func (*DomainServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DomainServicesResponse) GetServices() map[string]*DomainServiceResponse {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*LookupRequest)(nil), "domains.LookupRequest")
	proto.RegisterType((*GetDomainsRequest)(nil), "domains.GetDomainsRequest")
	proto.RegisterType((*CreateRequest)(nil), "domains.CreateRequest")
	proto.RegisterType((*DomainResponse)(nil), "domains.DomainResponse")
	proto.RegisterType((*DomainsResponse)(nil), "domains.DomainsResponse")
	proto.RegisterType((*VerifyRequest)(nil), "domains.VerifyRequest")
	proto.RegisterType((*DomainServiceResponse)(nil), "domains.DomainServiceResponse")
	proto.RegisterType((*SetServiceRequest)(nil), "domains.SetServiceRequest")
	proto.RegisterType((*ServiceRequest)(nil), "domains.ServiceRequest")
	proto.RegisterType((*DomainServicesResponse)(nil), "domains.DomainServicesResponse")
	proto.RegisterEnum("domains.VerificationMode", VerificationMode_name, VerificationMode_value)
	proto.RegisterEnum("domains.DomainServiceType", DomainServiceType_name, DomainServiceType_value)
	proto.RegisterEnum("domains.DomainServiceSchema", DomainServiceSchema_name, DomainServiceSchema_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Domains service

type DomainsClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	GetDomains(ctx context.Context, in *GetDomainsRequest, opts ...grpc.CallOption) (*DomainsResponse, error)
	Retrieve(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	SetService(ctx context.Context, in *SetServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	RetrieveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	GetServices(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServicesResponse, error)
	RemoveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	DisableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	EnableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
}

type domainsClient struct {
	cc *grpc.ClientConn
}

func NewDomainsClient(cc *grpc.ClientConn) DomainsClient {
	return &domainsClient{cc}
}

func (c *domainsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) GetDomains(ctx context.Context, in *GetDomainsRequest, opts ...grpc.CallOption) (*DomainsResponse, error) {
	out := new(DomainsResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/GetDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Retrieve(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) SetService(ctx context.Context, in *SetServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/SetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) RetrieveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/RetrieveService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) GetServices(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServicesResponse, error) {
	out := new(DomainServicesResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/GetServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) RemoveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/RemoveService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) DisableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/DisableService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) EnableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/EnableService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Domains service

type DomainsServer interface {
	Create(context.Context, *CreateRequest) (*DomainResponse, error)
	GetDomains(context.Context, *GetDomainsRequest) (*DomainsResponse, error)
	Retrieve(context.Context, *LookupRequest) (*DomainResponse, error)
	Verify(context.Context, *VerifyRequest) (*DomainResponse, error)
	SetService(context.Context, *SetServiceRequest) (*DomainServiceResponse, error)
	RetrieveService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
	GetServices(context.Context, *ServiceRequest) (*DomainServicesResponse, error)
	RemoveService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
	DisableService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
	EnableService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
}

func RegisterDomainsServer(s *grpc.Server, srv DomainsServer) {
	s.RegisterService(&_Domains_serviceDesc, srv)
}

func _Domains_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_GetDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).GetDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/GetDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).GetDomains(ctx, req.(*GetDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Retrieve(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_SetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).SetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/SetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).SetService(ctx, req.(*SetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_RetrieveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).RetrieveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/RetrieveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).RetrieveService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).GetServices(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).RemoveService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_DisableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).DisableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/DisableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).DisableService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_EnableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).EnableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/EnableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).EnableService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Domains_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domains.Domains",
	HandlerType: (*DomainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Domains_Create_Handler,
		},
		{
			MethodName: "GetDomains",
			Handler:    _Domains_GetDomains_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Domains_Retrieve_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Domains_Verify_Handler,
		},
		{
			MethodName: "SetService",
			Handler:    _Domains_SetService_Handler,
		},
		{
			MethodName: "RetrieveService",
			Handler:    _Domains_RetrieveService_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _Domains_GetServices_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _Domains_RemoveService_Handler,
		},
		{
			MethodName: "DisableService",
			Handler:    _Domains_DisableService_Handler,
		},
		{
			MethodName: "EnableService",
			Handler:    _Domains_EnableService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("domains.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0xe2, 0x46,
	0x14, 0x5e, 0x20, 0xdc, 0x4e, 0x02, 0x31, 0xb3, 0xdd, 0xac, 0x17, 0x6d, 0x9b, 0x8a, 0x6a, 0xd5,
	0x2a, 0x55, 0x1c, 0x35, 0xed, 0x43, 0x2f, 0x0f, 0x2b, 0xe2, 0xf5, 0x06, 0xb7, 0x40, 0xd0, 0xd8,
	0x44, 0x55, 0xfb, 0x60, 0x19, 0x18, 0x58, 0x6b, 0x0d, 0xa6, 0xbe, 0x20, 0xf1, 0x87, 0xda, 0x97,
	0xfe, 0x86, 0xaa, 0x52, 0xff, 0x58, 0xc7, 0x33, 0xbe, 0xe0, 0x04, 0xca, 0x76, 0x37, 0x2f, 0x88,
	0x73, 0xfb, 0xce, 0x99, 0x73, 0xbe, 0x39, 0x63, 0xa8, 0x4d, 0x9c, 0xb9, 0x69, 0x2d, 0x3c, 0x69,
	0xe9, 0x3a, 0xbe, 0x83, 0xca, 0x91, 0xd8, 0x3c, 0x9d, 0x39, 0xce, 0xcc, 0x26, 0x17, 0x4c, 0x3d,
	0x0a, 0xa6, 0x17, 0xbe, 0x35, 0x27, 0x9e, 0x6f, 0xce, 0x97, 0xdc, 0xb3, 0xf5, 0x39, 0xd4, 0xba,
	0x8e, 0xf3, 0x36, 0x58, 0x62, 0xf2, 0x5b, 0x40, 0x2d, 0xe8, 0x04, 0x4a, 0x3c, 0x58, 0xcc, 0x7d,
	0x9a, 0xfb, 0xa2, 0x8a, 0x23, 0xa9, 0x25, 0x41, 0xe3, 0x9a, 0xf8, 0xaf, 0x38, 0x6e, 0xec, 0xfc,
	0x0c, 0x2a, 0x23, 0xd7, 0x5c, 0x4c, 0x0c, 0x6b, 0x12, 0xb9, 0x97, 0x99, 0xac, 0x4e, 0x5a, 0x57,
	0x50, 0x93, 0x5d, 0x62, 0xfa, 0x64, 0x0f, 0x70, 0x06, 0x23, 0x9f, 0xc5, 0xf8, 0x33, 0x0f, 0x75,
	0x9e, 0x11, 0x13, 0x6f, 0xe9, 0x2c, 0x3c, 0xf2, 0x1e, 0x28, 0xa8, 0x05, 0x47, 0x2b, 0xe2, 0x5a,
	0x53, 0x6b, 0x6c, 0xfa, 0x96, 0xb3, 0x10, 0x0b, 0xcc, 0x9c, 0xd1, 0xa1, 0x2f, 0xa1, 0xb1, 0x29,
	0x1b, 0x73, 0x67, 0x42, 0xc4, 0x03, 0xe6, 0x28, 0x6c, 0x1a, 0x7a, 0x54, 0x8f, 0x4e, 0xe1, 0xd0,
	0xf2, 0x0c, 0xae, 0x26, 0x13, 0xb1, 0xc8, 0xdc, 0xc0, 0xf2, 0x6e, 0x23, 0x0d, 0x7a, 0x49, 0xe7,
	0x41, 0x4f, 0x9e, 0xba, 0x94, 0xa8, 0xcb, 0xe1, 0x65, 0x53, 0xe2, 0xd3, 0x90, 0xe2, 0x69, 0x48,
	0x7a, 0x3c, 0x0d, 0x7c, 0x14, 0x06, 0x24, 0x00, 0x4d, 0xa8, 0xd8, 0xe6, 0x62, 0x16, 0x98, 0x33,
	0x22, 0x96, 0x19, 0x7c, 0x22, 0x23, 0x11, 0xca, 0x63, 0x27, 0x58, 0xf8, 0xee, 0x5a, 0xac, 0xf0,
	0x83, 0x46, 0x62, 0xeb, 0x8f, 0x1c, 0x1c, 0x27, 0x03, 0x8a, 0xfa, 0xf5, 0x12, 0x62, 0x2e, 0xd0,
	0x86, 0x15, 0x68, 0x11, 0x2f, 0xa4, 0x98, 0x2a, 0x77, 0x5c, 0x63, 0x59, 0x09, 0xb1, 0x70, 0xc2,
	0x20, 0x0d, 0x8e, 0x36, 0x0d, 0x48, 0x80, 0xc2, 0x5b, 0xb2, 0x8e, 0xba, 0x1f, 0xfe, 0x45, 0xe7,
	0x50, 0x5c, 0x99, 0x76, 0x40, 0x58, 0xdf, 0x0f, 0x2f, 0x9f, 0xde, 0x49, 0x10, 0xe3, 0x63, 0xee,
	0xf5, 0x7d, 0xfe, 0xdb, 0x5c, 0xc8, 0x3a, 0x76, 0xd6, 0xf5, 0x3e, 0xd6, 0xfd, 0x93, 0x87, 0x27,
	0x1c, 0x46, 0x23, 0xee, 0xca, 0x1a, 0x93, 0xbd, 0x44, 0x78, 0x0e, 0x55, 0x2f, 0x18, 0x45, 0x26,
	0xce, 0x84, 0x54, 0x81, 0x24, 0x38, 0xf0, 0xd7, 0x4b, 0xc2, 0x38, 0x50, 0xa7, 0x03, 0xc9, 0x96,
	0x1a, 0xe5, 0xd0, 0xa9, 0x07, 0x66, 0x7e, 0xe8, 0x63, 0xa0, 0x73, 0x35, 0xc8, 0xc2, 0x1c, 0xd9,
	0x74, 0x8c, 0x21, 0x21, 0x2a, 0xb8, 0x6a, 0xd1, 0x56, 0x30, 0x05, 0x63, 0x9d, 0xe9, 0x11, 0x23,
	0x70, 0xed, 0x88, 0x06, 0xe5, 0x50, 0x1e, 0xba, 0x36, 0x92, 0xa1, 0x3e, 0x21, 0x53, 0x33, 0xb0,
	0x7d, 0xc3, 0x1b, 0xbf, 0x21, 0x73, 0x93, 0x91, 0xa0, 0x7e, 0xf9, 0x7c, 0x7b, 0x4e, 0x8d, 0xf9,
	0xe0, 0x5a, 0x14, 0xc3, 0x45, 0xa4, 0xc0, 0xb1, 0xb9, 0x32, 0x2d, 0x9b, 0x26, 0x8b, 0x51, 0xca,
	0x74, 0x8a, 0xfb, 0x50, 0xea, 0x71, 0x10, 0x97, 0x5b, 0x6b, 0x68, 0x68, 0xc4, 0x4f, 0x3a, 0xf8,
	0xdf, 0xf7, 0xf1, 0x41, 0x1b, 0xd8, 0xfa, 0x19, 0xea, 0xef, 0x98, 0x37, 0x46, 0xce, 0xbf, 0x23,
	0xf2, 0xdf, 0x39, 0x38, 0xc9, 0xd8, 0x52, 0xd2, 0xab, 0x50, 0xf1, 0x22, 0x5d, 0xc4, 0xfa, 0xf3,
	0xed, 0x70, 0x29, 0xf9, 0x63, 0x05, 0x67, 0x7f, 0x12, 0xde, 0xfc, 0x15, 0x6a, 0x19, 0xd3, 0x16,
	0xfe, 0x7f, 0x93, 0xe5, 0xff, 0x27, 0xdb, 0x53, 0x6d, 0xb9, 0x06, 0x67, 0x5f, 0x81, 0x70, 0x7b,
	0x77, 0xb9, 0x94, 0xa1, 0xf0, 0xaa, 0xaf, 0x09, 0x8f, 0x50, 0x05, 0x0e, 0x5e, 0xab, 0x5d, 0x45,
	0xc8, 0x21, 0x80, 0x52, 0xaf, 0xdd, 0x1f, 0xb6, 0xbb, 0x42, 0xfe, 0xec, 0xf7, 0x1c, 0x34, 0xee,
	0x75, 0x04, 0x21, 0xda, 0xe5, 0xe1, 0x60, 0x70, 0x83, 0x75, 0x23, 0xfc, 0xa1, 0x9e, 0x8f, 0x28,
	0x75, 0x9f, 0xc9, 0x37, 0xbd, 0xde, 0xb0, 0xaf, 0xca, 0x6d, 0x5d, 0xbd, 0xe9, 0x1b, 0x03, 0xac,
	0xbc, 0x56, 0xb0, 0xd2, 0x97, 0x15, 0x8d, 0x82, 0x3e, 0x86, 0x63, 0x79, 0xa8, 0xe9, 0x37, 0x3d,
	0x05, 0xc7, 0x31, 0x79, 0x54, 0x83, 0xaa, 0xd6, 0x09, 0x51, 0x86, 0xb8, 0x2b, 0x14, 0xd0, 0x13,
	0x68, 0xb0, 0x18, 0xdc, 0xee, 0x1a, 0x3a, 0x6e, 0xcb, 0x3f, 0xa9, 0xfd, 0x6b, 0xe1, 0x00, 0x7d,
	0x04, 0xc2, 0x60, 0x78, 0xd5, 0x55, 0xb5, 0x4e, 0x1a, 0x5b, 0x0c, 0x63, 0xbb, 0xea, 0xad, 0x62,
	0xc8, 0x9d, 0xb6, 0x2e, 0x94, 0xce, 0xce, 0xe0, 0xf1, 0x16, 0x6a, 0x86, 0xa7, 0xea, 0xe8, 0xfa,
	0x80, 0xd6, 0x57, 0x85, 0x62, 0xf8, 0x8f, 0xd6, 0x72, 0xf9, 0x57, 0x11, 0xca, 0xd1, 0x92, 0x41,
	0xdf, 0x41, 0x89, 0xbf, 0x1b, 0xe8, 0x24, 0x69, 0x64, 0xe6, 0x21, 0x69, 0xee, 0x5a, 0x30, 0xe8,
	0x0a, 0x20, 0x7d, 0xa2, 0x50, 0xca, 0xa0, 0x7b, 0xef, 0x56, 0x53, 0xdc, 0xb5, 0x04, 0xd1, 0x0f,
	0x50, 0xc1, 0xc4, 0x77, 0x2d, 0xb2, 0xda, 0x2c, 0x20, 0xf3, 0x44, 0xee, 0x2e, 0x80, 0xd6, 0xce,
	0xd7, 0xda, 0x46, 0x68, 0x66, 0xcf, 0xed, 0x0e, 0xed, 0x00, 0xa4, 0x57, 0x74, 0xa3, 0xf6, 0x7b,
	0xf7, 0xb6, 0xb9, 0x87, 0x5f, 0xe8, 0x47, 0x38, 0x8e, 0x4f, 0x10, 0xc3, 0x3d, 0xdd, 0x80, 0xfb,
	0x5f, 0x58, 0xd7, 0x70, 0x78, 0x9d, 0x14, 0xe0, 0xed, 0xc6, 0x39, 0xdd, 0x73, 0xbd, 0xe8, 0xf1,
	0x6a, 0x98, 0xcc, 0x9d, 0x07, 0x28, 0x49, 0xa5, 0x9f, 0x04, 0x96, 0x17, 0xae, 0xdf, 0x0f, 0x86,
	0xa2, 0x45, 0xf1, 0x45, 0xfe, 0xa1, 0x48, 0x57, 0x2f, 0x7e, 0xf9, 0x6c, 0x66, 0xf9, 0x6f, 0x82,
	0x91, 0x34, 0x76, 0xe6, 0x17, 0x53, 0xc7, 0xf5, 0xe9, 0xa5, 0xe6, 0x1f, 0x5d, 0xe7, 0x33, 0xe7,
	0x22, 0x0a, 0x1e, 0x95, 0x98, 0xe6, 0xeb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x66, 0x3f, 0xc0,
	0x25, 0xae, 0x09, 0x00, 0x00,
}
