// Code generated by protoc-gen-go.
// source: ftypes/traffic.proto
// DO NOT EDIT!

/*
Package traffic is a generated protocol buffer package.

It is generated from these files:
	ftypes/traffic.proto

It has these top-level messages:
	CampaignDetails
	TrackingDetails
*/
package traffic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CampaignMedium int32

const (
	// Branding
	CampaignMedium_PHONE          CampaignMedium = 0
	CampaignMedium_LETTER         CampaignMedium = 1
	CampaignMedium_EMAIL          CampaignMedium = 2
	CampaignMedium_SMS            CampaignMedium = 3
	CampaignMedium_DIRECT         CampaignMedium = 4
	CampaignMedium_ORGANIC_SEARCH CampaignMedium = 5
	CampaignMedium_WORD_OF_MOUTH  CampaignMedium = 6
	CampaignMedium_REFERRAL       CampaignMedium = 7
	// Paid Advertising
	CampaignMedium_AFFILIATE         CampaignMedium = 8
	CampaignMedium_AFFILIATE_NETWORK CampaignMedium = 9
	CampaignMedium_PAID_SEARCH       CampaignMedium = 10
	CampaignMedium_RETARGETTING      CampaignMedium = 11
	CampaignMedium_SOCIAL_ADVERT     CampaignMedium = 12
	CampaignMedium_INCENTIVE         CampaignMedium = 13
	CampaignMedium_REVIEW            CampaignMedium = 14
	CampaignMedium_BANNER            CampaignMedium = 15
	// Generated Content
	CampaignMedium_SOCIAL_MEDIA        CampaignMedium = 16
	CampaignMedium_WEBINAR             CampaignMedium = 17
	CampaignMedium_FORUM               CampaignMedium = 18
	CampaignMedium_VIDEO               CampaignMedium = 19
	CampaignMedium_PODCAST             CampaignMedium = 20
	CampaignMedium_RESEARCH_WHITEPAPER CampaignMedium = 21
	CampaignMedium_BLOG                CampaignMedium = 22
	CampaignMedium_COMMENT_MARKETING   CampaignMedium = 23
	CampaignMedium_TESTIMONIAL         CampaignMedium = 24
	CampaignMedium_CASE_STUDY          CampaignMedium = 25
	CampaignMedium_EBOOK               CampaignMedium = 26
	CampaignMedium_HOW_TO_GUIDE        CampaignMedium = 27
	CampaignMedium_INFOGRAPHIC         CampaignMedium = 28
	// Offline
	CampaignMedium_TV               CampaignMedium = 29
	CampaignMedium_RADIO            CampaignMedium = 30
	CampaignMedium_BILLBOARD        CampaignMedium = 31
	CampaignMedium_NEWSPAPER        CampaignMedium = 32
	CampaignMedium_MAGAZINE         CampaignMedium = 33
	CampaignMedium_BROCHURE         CampaignMedium = 34
	CampaignMedium_PRINT_NEWSLETTER CampaignMedium = 35
	CampaignMedium_FLYER            CampaignMedium = 36
	CampaignMedium_BUSINESS_CARD    CampaignMedium = 37
	CampaignMedium_DIRECTORY        CampaignMedium = 38
	CampaignMedium_COMPANY_SWAG     CampaignMedium = 39
)

var CampaignMedium_name = map[int32]string{
	0:  "PHONE",
	1:  "LETTER",
	2:  "EMAIL",
	3:  "SMS",
	4:  "DIRECT",
	5:  "ORGANIC_SEARCH",
	6:  "WORD_OF_MOUTH",
	7:  "REFERRAL",
	8:  "AFFILIATE",
	9:  "AFFILIATE_NETWORK",
	10: "PAID_SEARCH",
	11: "RETARGETTING",
	12: "SOCIAL_ADVERT",
	13: "INCENTIVE",
	14: "REVIEW",
	15: "BANNER",
	16: "SOCIAL_MEDIA",
	17: "WEBINAR",
	18: "FORUM",
	19: "VIDEO",
	20: "PODCAST",
	21: "RESEARCH_WHITEPAPER",
	22: "BLOG",
	23: "COMMENT_MARKETING",
	24: "TESTIMONIAL",
	25: "CASE_STUDY",
	26: "EBOOK",
	27: "HOW_TO_GUIDE",
	28: "INFOGRAPHIC",
	29: "TV",
	30: "RADIO",
	31: "BILLBOARD",
	32: "NEWSPAPER",
	33: "MAGAZINE",
	34: "BROCHURE",
	35: "PRINT_NEWSLETTER",
	36: "FLYER",
	37: "BUSINESS_CARD",
	38: "DIRECTORY",
	39: "COMPANY_SWAG",
}
var CampaignMedium_value = map[string]int32{
	"PHONE":               0,
	"LETTER":              1,
	"EMAIL":               2,
	"SMS":                 3,
	"DIRECT":              4,
	"ORGANIC_SEARCH":      5,
	"WORD_OF_MOUTH":       6,
	"REFERRAL":            7,
	"AFFILIATE":           8,
	"AFFILIATE_NETWORK":   9,
	"PAID_SEARCH":         10,
	"RETARGETTING":        11,
	"SOCIAL_ADVERT":       12,
	"INCENTIVE":           13,
	"REVIEW":              14,
	"BANNER":              15,
	"SOCIAL_MEDIA":        16,
	"WEBINAR":             17,
	"FORUM":               18,
	"VIDEO":               19,
	"PODCAST":             20,
	"RESEARCH_WHITEPAPER": 21,
	"BLOG":                22,
	"COMMENT_MARKETING":   23,
	"TESTIMONIAL":         24,
	"CASE_STUDY":          25,
	"EBOOK":               26,
	"HOW_TO_GUIDE":        27,
	"INFOGRAPHIC":         28,
	"TV":                  29,
	"RADIO":               30,
	"BILLBOARD":           31,
	"NEWSPAPER":           32,
	"MAGAZINE":            33,
	"BROCHURE":            34,
	"PRINT_NEWSLETTER":    35,
	"FLYER":               36,
	"BUSINESS_CARD":       37,
	"DIRECTORY":           38,
	"COMPANY_SWAG":        39,
}

func (x CampaignMedium) String() string {
	return proto.EnumName(CampaignMedium_name, int32(x))
}
func (CampaignMedium) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LinkType int32

const (
	LinkType_FOLLOW   LinkType = 0
	LinkType_DOWNLOAD LinkType = 1
)

var LinkType_name = map[int32]string{
	0: "FOLLOW",
	1: "DOWNLOAD",
}
var LinkType_value = map[string]int32{
	"FOLLOW":   0,
	"DOWNLOAD": 1,
}

func (x LinkType) String() string {
	return proto.EnumName(LinkType_name, int32(x))
}
func (LinkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CampaignDetails struct {
	Id     string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Source string         `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Medium CampaignMedium `protobuf:"varint,3,opt,name=medium,enum=fortifi.traffic.CampaignMedium" json:"medium,omitempty"`
}

func (m *CampaignDetails) Reset()                    { *m = CampaignDetails{} }
func (m *CampaignDetails) String() string            { return proto.CompactTextString(m) }
func (*CampaignDetails) ProtoMessage()               {}
func (*CampaignDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TrackingDetails struct {
	Id1 string `protobuf:"bytes,1,opt,name=id1" json:"id1,omitempty"`
	Id2 string `protobuf:"bytes,2,opt,name=id2" json:"id2,omitempty"`
	Id3 string `protobuf:"bytes,3,opt,name=id3" json:"id3,omitempty"`
	Id4 string `protobuf:"bytes,4,opt,name=id4" json:"id4,omitempty"`
	Id5 string `protobuf:"bytes,5,opt,name=id5" json:"id5,omitempty"`
}

func (m *TrackingDetails) Reset()                    { *m = TrackingDetails{} }
func (m *TrackingDetails) String() string            { return proto.CompactTextString(m) }
func (*TrackingDetails) ProtoMessage()               {}
func (*TrackingDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*CampaignDetails)(nil), "fortifi.traffic.CampaignDetails")
	proto.RegisterType((*TrackingDetails)(nil), "fortifi.traffic.TrackingDetails")
	proto.RegisterEnum("fortifi.traffic.CampaignMedium", CampaignMedium_name, CampaignMedium_value)
	proto.RegisterEnum("fortifi.traffic.LinkType", LinkType_name, LinkType_value)
}

func init() { proto.RegisterFile("ftypes/traffic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x53, 0x5b, 0x6f, 0xda, 0x30,
	0x14, 0x1e, 0x97, 0x52, 0x70, 0x5b, 0x38, 0x75, 0x6f, 0xec, 0xda, 0xae, 0xeb, 0x2e, 0xaa, 0x36,
	0xd0, 0x7a, 0xd1, 0x9e, 0x9d, 0xc4, 0x04, 0xab, 0x89, 0x1d, 0x39, 0x86, 0x88, 0xbe, 0x44, 0x94,
	0x02, 0x8b, 0x3a, 0x4a, 0x45, 0xe9, 0xc3, 0xfe, 0xf3, 0x7e, 0xc4, 0xec, 0x24, 0x4c, 0xea, 0xde,
	0xce, 0xf9, 0xec, 0xf3, 0x9d, 0xef, 0xdc, 0xd0, 0xee, 0x64, 0xf9, 0xfb, 0x61, 0xfc, 0xd8, 0x5e,
	0x2e, 0x86, 0x93, 0x49, 0x32, 0x6a, 0x3d, 0x2c, 0xe6, 0xcb, 0x39, 0x6e, 0x4c, 0xe6, 0x8b, 0x65,
	0x32, 0x49, 0x5a, 0x39, 0x7c, 0xbc, 0x40, 0x0d, 0x7b, 0x38, 0x7b, 0x18, 0x26, 0xd3, 0x7b, 0x67,
	0xbc, 0x1c, 0x26, 0xbf, 0x1e, 0x71, 0x1d, 0x15, 0x93, 0xdb, 0x66, 0xe1, 0xa8, 0xf0, 0xa5, 0x26,
	0xb5, 0x85, 0xf7, 0x51, 0xe5, 0x71, 0xfe, 0xb4, 0x18, 0x8d, 0x9b, 0xc5, 0x14, 0xcb, 0x3d, 0xfc,
	0x03, 0x55, 0x66, 0xe3, 0xdb, 0xe4, 0x69, 0xd6, 0x2c, 0x69, 0xbc, 0x7e, 0x76, 0xd8, 0xfa, 0x8f,
	0xbc, 0xb5, 0x62, 0xf6, 0xd3, 0x6f, 0x32, 0xff, 0x7e, 0x7c, 0x87, 0x1a, 0x6a, 0x31, 0x1c, 0xdd,
	0x25, 0xf7, 0xd3, 0x55, 0x4e, 0x40, 0xa5, 0xe4, 0xf6, 0x7b, 0x9e, 0xd4, 0x98, 0x19, 0x72, 0x96,
	0xa7, 0x34, 0x66, 0x86, 0x9c, 0xa7, 0xc9, 0x52, 0xe4, 0x3c, 0x43, 0x2e, 0x9a, 0xe5, 0x15, 0x72,
	0x91, 0x21, 0x97, 0xcd, 0xb5, 0x15, 0x72, 0x79, 0xfa, 0xa7, 0x8c, 0xea, 0xcf, 0x75, 0xe0, 0x1a,
	0x5a, 0x0b, 0xba, 0x82, 0x53, 0x78, 0x81, 0x11, 0xaa, 0x78, 0x54, 0x29, 0x2a, 0xa1, 0x60, 0x60,
	0xea, 0x13, 0xe6, 0x41, 0x11, 0xaf, 0xa3, 0x52, 0xe8, 0x87, 0x50, 0x32, 0xef, 0x0e, 0x93, 0xd4,
	0x56, 0x50, 0xc6, 0x18, 0xd5, 0x85, 0x74, 0x09, 0x67, 0x76, 0x1c, 0x52, 0x22, 0xed, 0x2e, 0xac,
	0xe1, 0x6d, 0xb4, 0x15, 0x09, 0xe9, 0xc4, 0xa2, 0x13, 0xfb, 0xa2, 0xa7, 0xba, 0x50, 0xc1, 0x9b,
	0xa8, 0x2a, 0x69, 0x87, 0x4a, 0x49, 0x3c, 0x58, 0xc7, 0x5b, 0xa8, 0x46, 0x3a, 0x1d, 0xe6, 0x31,
	0xa2, 0x28, 0x54, 0xf1, 0x1e, 0xda, 0xfe, 0xe7, 0xc6, 0x9c, 0x2a, 0x1d, 0x7c, 0x05, 0x35, 0xdc,
	0x40, 0x1b, 0x01, 0x61, 0xce, 0x8a, 0x17, 0xe9, 0x3a, 0x36, 0x25, 0x55, 0x44, 0xba, 0x5a, 0x1c,
	0xe3, 0x2e, 0x6c, 0x98, 0x4c, 0xa1, 0xb0, 0x19, 0xf1, 0x62, 0xe2, 0xf4, 0xa9, 0x54, 0xb0, 0x69,
	0xb8, 0x19, 0xb7, 0x29, 0x57, 0xac, 0x4f, 0x61, 0xcb, 0x68, 0x95, 0xb4, 0xcf, 0x68, 0x04, 0x75,
	0x63, 0x5b, 0x84, 0x73, 0x5d, 0x57, 0xc3, 0x70, 0xe5, 0x91, 0x3e, 0x75, 0x18, 0x01, 0xc0, 0x1b,
	0x68, 0x3d, 0xa2, 0x16, 0xe3, 0x44, 0xc2, 0xb6, 0x29, 0xbb, 0x23, 0x64, 0xcf, 0x07, 0x6c, 0xcc,
	0x3e, 0x73, 0xa8, 0x80, 0x1d, 0xf3, 0x25, 0x10, 0x8e, 0x4d, 0x42, 0x05, 0xbb, 0xf8, 0x00, 0xed,
	0x48, 0x9a, 0x69, 0x8b, 0xa3, 0x2e, 0x53, 0x34, 0x20, 0x81, 0xa6, 0xde, 0xc3, 0x55, 0x54, 0xb6,
	0x3c, 0xe1, 0xc2, 0xbe, 0x29, 0xcc, 0x16, 0xbe, 0xaf, 0xc5, 0xc4, 0x3e, 0x91, 0x57, 0x34, 0x55,
	0x7d, 0x60, 0x0a, 0x53, 0x34, 0x54, 0xcc, 0x17, 0x5c, 0x0b, 0x80, 0xa6, 0x5e, 0x2e, 0xa4, 0x49,
	0x69, 0x1c, 0xaa, 0x9e, 0x33, 0x80, 0x97, 0x69, 0xd3, 0x2d, 0x21, 0xae, 0xe0, 0x95, 0xd1, 0xd9,
	0x15, 0x51, 0xac, 0x44, 0xec, 0xf6, 0xb4, 0x0a, 0x78, 0x6d, 0xa2, 0x19, 0xef, 0x08, 0x57, 0x92,
	0xa0, 0xcb, 0x6c, 0x78, 0x83, 0x2b, 0xa8, 0xa8, 0xfa, 0xf0, 0xd6, 0x44, 0x49, 0xe2, 0x30, 0x01,
	0xef, 0x4c, 0x13, 0x2c, 0xe6, 0x79, 0x96, 0x20, 0xd2, 0x81, 0x43, 0xe3, 0x72, 0x1a, 0x85, 0x99,
	0xc0, 0x23, 0x33, 0x0c, 0x9f, 0xb8, 0xe4, 0x9a, 0xe9, 0x69, 0xbf, 0x37, 0x9e, 0x25, 0x85, 0xdd,
	0xed, 0x49, 0x0a, 0xc7, 0x78, 0x17, 0x41, 0x20, 0x99, 0x16, 0x6c, 0x02, 0xf2, 0x2d, 0xf8, 0x90,
	0xb6, 0xc3, 0x1b, 0x68, 0xf3, 0xc4, 0xb4, 0xdc, 0xea, 0x85, 0x3a, 0x34, 0x0c, 0x63, 0xdb, 0xd0,
	0x7f, 0x34, 0xf4, 0xd9, 0x3e, 0x08, 0x39, 0x80, 0x4f, 0x46, 0xb2, 0xae, 0x3a, 0x20, 0x7c, 0x10,
	0x87, 0x11, 0x71, 0xe1, 0xf3, 0xe9, 0x09, 0xaa, 0x7a, 0xc9, 0xfd, 0x9d, 0xd2, 0xb7, 0x67, 0x86,
	0xd0, 0x11, 0x9e, 0x27, 0x22, 0xbd, 0x68, 0x3a, 0xb5, 0x23, 0x22, 0xee, 0x09, 0xe2, 0x40, 0xc1,
	0xfa, 0x7a, 0x7d, 0x3a, 0x4d, 0x96, 0x3f, 0x9f, 0x6e, 0x5a, 0xa3, 0xf9, 0xac, 0x9d, 0x9f, 0x4d,
	0x3b, 0x3d, 0xd1, 0x6f, 0xd3, 0x79, 0xfb, 0xf9, 0xe9, 0xde, 0x54, 0xd2, 0x87, 0xf3, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x45, 0xed, 0x17, 0x23, 0xd3, 0x03, 0x00, 0x00,
}
