// Code generated by protoc-gen-go.
// source: ftypes/customer.proto
// DO NOT EDIT!

/*
Package customer is a generated protocol buffer package.

It is generated from these files:
	ftypes/customer.proto

It has these top-level messages:
	Customer
	CustomerDates
	CustomerFlags
	CustomerBilling
	CustomerProductFeature
	CustomerProducts
*/
package customer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import fortifi_finance "github.com/fortifi/proto-go/ftypes/finance"
import fortifi_traffic "github.com/fortifi/proto-go/ftypes/traffic"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountType int32

const (
	AccountType_UNKNOWN     AccountType = 0
	AccountType_RESIDENTIAL AccountType = 1
	AccountType_BUSINESS    AccountType = 2
	AccountType_STUDENT     AccountType = 3
	AccountType_ENTERPRISE  AccountType = 4
	AccountType_CHARITY     AccountType = 5
)

var AccountType_name = map[int32]string{
	0: "UNKNOWN",
	1: "RESIDENTIAL",
	2: "BUSINESS",
	3: "STUDENT",
	4: "ENTERPRISE",
	5: "CHARITY",
}
var AccountType_value = map[string]int32{
	"UNKNOWN":     0,
	"RESIDENTIAL": 1,
	"BUSINESS":    2,
	"STUDENT":     3,
	"ENTERPRISE":  4,
	"CHARITY":     5,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AccountStatus int32

const (
	AccountStatus_INITIALISED AccountStatus = 0
	AccountStatus_SETUP       AccountStatus = 1
	AccountStatus_ACTIVE      AccountStatus = 2
	AccountStatus_SUSPENDED   AccountStatus = 3
	AccountStatus_EXPIRED     AccountStatus = 4
	AccountStatus_CANCELLED   AccountStatus = 5
	AccountStatus_ARCHIVED    AccountStatus = 6
	AccountStatus_DELETING    AccountStatus = 7
)

var AccountStatus_name = map[int32]string{
	0: "INITIALISED",
	1: "SETUP",
	2: "ACTIVE",
	3: "SUSPENDED",
	4: "EXPIRED",
	5: "CANCELLED",
	6: "ARCHIVED",
	7: "DELETING",
}
var AccountStatus_value = map[string]int32{
	"INITIALISED": 0,
	"SETUP":       1,
	"ACTIVE":      2,
	"SUSPENDED":   3,
	"EXPIRED":     4,
	"CANCELLED":   5,
	"ARCHIVED":    6,
	"DELETING":    7,
}

func (x AccountStatus) String() string {
	return proto.EnumName(AccountStatus_name, int32(x))
}
func (AccountStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Lifecycle int32

const (
	Lifecycle_UNKNOWN_LIFECYCLE        Lifecycle = 0
	Lifecycle_COLD                     Lifecycle = 1
	Lifecycle_SUBSCRIBER               Lifecycle = 2
	Lifecycle_SUPPORT                  Lifecycle = 3
	Lifecycle_LEAD                     Lifecycle = 4
	Lifecycle_MARKETING_QUALIFIED_LEAD Lifecycle = 5
	Lifecycle_SALES_QUALIFIED_LEAD     Lifecycle = 6
	Lifecycle_TRIAL                    Lifecycle = 7
	Lifecycle_FREE                     Lifecycle = 8
	Lifecycle_OPPORTUNITY              Lifecycle = 9
	Lifecycle_CUSTOMER                 Lifecycle = 10
	Lifecycle_CANCEL                   Lifecycle = 11
	Lifecycle_LAPSED                   Lifecycle = 12
	Lifecycle_LOST                     Lifecycle = 13
	Lifecycle_CLOSED                   Lifecycle = 14
)

var Lifecycle_name = map[int32]string{
	0:  "UNKNOWN_LIFECYCLE",
	1:  "COLD",
	2:  "SUBSCRIBER",
	3:  "SUPPORT",
	4:  "LEAD",
	5:  "MARKETING_QUALIFIED_LEAD",
	6:  "SALES_QUALIFIED_LEAD",
	7:  "TRIAL",
	8:  "FREE",
	9:  "OPPORTUNITY",
	10: "CUSTOMER",
	11: "CANCEL",
	12: "LAPSED",
	13: "LOST",
	14: "CLOSED",
}
var Lifecycle_value = map[string]int32{
	"UNKNOWN_LIFECYCLE": 0,
	"COLD":              1,
	"SUBSCRIBER":        2,
	"SUPPORT":           3,
	"LEAD":              4,
	"MARKETING_QUALIFIED_LEAD": 5,
	"SALES_QUALIFIED_LEAD":     6,
	"TRIAL":                    7,
	"FREE":                     8,
	"OPPORTUNITY":              9,
	"CUSTOMER":                 10,
	"CANCEL":                   11,
	"LAPSED":                   12,
	"LOST":                     13,
	"CLOSED":                   14,
}

func (x Lifecycle) String() string {
	return proto.EnumName(Lifecycle_name, int32(x))
}
func (Lifecycle) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Orientation int32

const (
	Orientation_UNKNOWN_ORIENTATION Orientation = 0
	Orientation_COST                Orientation = 1
	Orientation_VALUE               Orientation = 2
	Orientation_TECHNOLOGY          Orientation = 3
	Orientation_BRAND               Orientation = 4
)

var Orientation_name = map[int32]string{
	0: "UNKNOWN_ORIENTATION",
	1: "COST",
	2: "VALUE",
	3: "TECHNOLOGY",
	4: "BRAND",
}
var Orientation_value = map[string]int32{
	"UNKNOWN_ORIENTATION": 0,
	"COST":                1,
	"VALUE":               2,
	"TECHNOLOGY":          3,
	"BRAND":               4,
}

func (x Orientation) String() string {
	return proto.EnumName(Orientation_name, int32(x))
}
func (Orientation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Customer struct {
	Id             string                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	BrandId        string                         `protobuf:"bytes,2,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
	AccountId      string                         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DisplayName    string                         `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Email          string                         `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Phone          string                         `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	Language       string                         `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	Timezone       string                         `protobuf:"bytes,8,opt,name=timezone" json:"timezone,omitempty"`
	Country        string                         `protobuf:"bytes,9,opt,name=country" json:"country,omitempty"`
	AccountType    AccountType                    `protobuf:"varint,10,opt,name=account_type,json=accountType,enum=fortifi.customer.AccountType" json:"account_type,omitempty"`
	AccountStatus  AccountStatus                  `protobuf:"varint,11,opt,name=account_status,json=accountStatus,enum=fortifi.customer.AccountStatus" json:"account_status,omitempty"`
	Lifecycle      Lifecycle                      `protobuf:"varint,12,opt,name=lifecycle,enum=fortifi.customer.Lifecycle" json:"lifecycle,omitempty"`
	Orientation    Orientation                    `protobuf:"varint,13,opt,name=orientation,enum=fortifi.customer.Orientation" json:"orientation,omitempty"`
	ParentAccount  string                         `protobuf:"bytes,14,opt,name=parent_account,json=parentAccount" json:"parent_account,omitempty"`
	Source         fortifi_traffic.CampaignMedium `protobuf:"varint,15,opt,name=source,enum=fortifi.traffic.CampaignMedium" json:"source,omitempty"`
	SourceValue    string                         `protobuf:"bytes,16,opt,name=source_value,json=sourceValue" json:"source_value,omitempty"`
	AccountManager string                         `protobuf:"bytes,17,opt,name=account_manager,json=accountManager" json:"account_manager,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Customer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Customer) GetBrandId() string {
	if m != nil {
		return m.BrandId
	}
	return ""
}

func (m *Customer) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Customer) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Customer) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Customer) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Customer) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Customer) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_UNKNOWN
}

func (m *Customer) GetAccountStatus() AccountStatus {
	if m != nil {
		return m.AccountStatus
	}
	return AccountStatus_INITIALISED
}

func (m *Customer) GetLifecycle() Lifecycle {
	if m != nil {
		return m.Lifecycle
	}
	return Lifecycle_UNKNOWN_LIFECYCLE
}

func (m *Customer) GetOrientation() Orientation {
	if m != nil {
		return m.Orientation
	}
	return Orientation_UNKNOWN_ORIENTATION
}

func (m *Customer) GetParentAccount() string {
	if m != nil {
		return m.ParentAccount
	}
	return ""
}

func (m *Customer) GetSource() fortifi_traffic.CampaignMedium {
	if m != nil {
		return m.Source
	}
	return fortifi_traffic.CampaignMedium_PHONE
}

func (m *Customer) GetSourceValue() string {
	if m != nil {
		return m.SourceValue
	}
	return ""
}

func (m *Customer) GetAccountManager() string {
	if m != nil {
		return m.AccountManager
	}
	return ""
}

type CustomerDates struct {
	CustomerId string                     `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Opened     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=opened" json:"opened,omitempty"`
	Closed     *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=closed" json:"closed,omitempty"`
	TrialStart *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=trial_start,json=trialStart" json:"trial_start,omitempty"`
	TrialEnd   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=trial_end,json=trialEnd" json:"trial_end,omitempty"`
	Reopened   *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=reopened" json:"reopened,omitempty"`
}

func (m *CustomerDates) Reset()                    { *m = CustomerDates{} }
func (m *CustomerDates) String() string            { return proto.CompactTextString(m) }
func (*CustomerDates) ProtoMessage()               {}
func (*CustomerDates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CustomerDates) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *CustomerDates) GetOpened() *google_protobuf.Timestamp {
	if m != nil {
		return m.Opened
	}
	return nil
}

func (m *CustomerDates) GetClosed() *google_protobuf.Timestamp {
	if m != nil {
		return m.Closed
	}
	return nil
}

func (m *CustomerDates) GetTrialStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.TrialStart
	}
	return nil
}

func (m *CustomerDates) GetTrialEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.TrialEnd
	}
	return nil
}

func (m *CustomerDates) GetReopened() *google_protobuf.Timestamp {
	if m != nil {
		return m.Reopened
	}
	return nil
}

type CustomerFlags struct {
	CustomerId   string `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Loyal        bool   `protobuf:"varint,2,opt,name=loyal" json:"loyal,omitempty"`
	Vic          bool   `protobuf:"varint,3,opt,name=vic" json:"vic,omitempty"`
	Fraud        bool   `protobuf:"varint,4,opt,name=fraud" json:"fraud,omitempty"`
	Chargeback   bool   `protobuf:"varint,5,opt,name=chargeback" json:"chargeback,omitempty"`
	Discount     bool   `protobuf:"varint,6,opt,name=discount" json:"discount,omitempty"`
	Impulse      bool   `protobuf:"varint,7,opt,name=impulse" json:"impulse,omitempty"`
	TestAccount  bool   `protobuf:"varint,8,opt,name=test_account,json=testAccount" json:"test_account,omitempty"`
	HasPurchased bool   `protobuf:"varint,9,opt,name=has_purchased,json=hasPurchased" json:"has_purchased,omitempty"`
	Renewed      bool   `protobuf:"varint,10,opt,name=renewed" json:"renewed,omitempty"`
	Renewing     bool   `protobuf:"varint,11,opt,name=renewing" json:"renewing,omitempty"`
	AtRisk       bool   `protobuf:"varint,12,opt,name=at_risk,json=atRisk" json:"at_risk,omitempty"`
}

func (m *CustomerFlags) Reset()                    { *m = CustomerFlags{} }
func (m *CustomerFlags) String() string            { return proto.CompactTextString(m) }
func (*CustomerFlags) ProtoMessage()               {}
func (*CustomerFlags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CustomerFlags) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *CustomerFlags) GetLoyal() bool {
	if m != nil {
		return m.Loyal
	}
	return false
}

func (m *CustomerFlags) GetVic() bool {
	if m != nil {
		return m.Vic
	}
	return false
}

func (m *CustomerFlags) GetFraud() bool {
	if m != nil {
		return m.Fraud
	}
	return false
}

func (m *CustomerFlags) GetChargeback() bool {
	if m != nil {
		return m.Chargeback
	}
	return false
}

func (m *CustomerFlags) GetDiscount() bool {
	if m != nil {
		return m.Discount
	}
	return false
}

func (m *CustomerFlags) GetImpulse() bool {
	if m != nil {
		return m.Impulse
	}
	return false
}

func (m *CustomerFlags) GetTestAccount() bool {
	if m != nil {
		return m.TestAccount
	}
	return false
}

func (m *CustomerFlags) GetHasPurchased() bool {
	if m != nil {
		return m.HasPurchased
	}
	return false
}

func (m *CustomerFlags) GetRenewed() bool {
	if m != nil {
		return m.Renewed
	}
	return false
}

func (m *CustomerFlags) GetRenewing() bool {
	if m != nil {
		return m.Renewing
	}
	return false
}

func (m *CustomerFlags) GetAtRisk() bool {
	if m != nil {
		return m.AtRisk
	}
	return false
}

type CustomerBilling struct {
	CustomerId      string                     `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Currency        string                     `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	IsDelinquent    string                     `protobuf:"bytes,3,opt,name=is_delinquent,json=isDelinquent" json:"is_delinquent,omitempty"`
	CurrentBalance  float64                    `protobuf:"fixed64,4,opt,name=current_balance,json=currentBalance" json:"current_balance,omitempty"`
	TotalPaid       float64                    `protobuf:"fixed64,5,opt,name=total_paid,json=totalPaid" json:"total_paid,omitempty"`
	TotalRefunded   float64                    `protobuf:"fixed64,6,opt,name=total_refunded,json=totalRefunded" json:"total_refunded,omitempty"`
	TotalCredited   float64                    `protobuf:"fixed64,7,opt,name=total_credited,json=totalCredited" json:"total_credited,omitempty"`
	TotalChargeback float64                    `protobuf:"fixed64,8,opt,name=total_chargeback,json=totalChargeback" json:"total_chargeback,omitempty"`
	DelinquentSince *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=delinquent_since,json=delinquentSince" json:"delinquent_since,omitempty"`
	FirstPaid       *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=first_paid,json=firstPaid" json:"first_paid,omitempty"`
	LastPaid        *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=last_paid,json=lastPaid" json:"last_paid,omitempty"`
	LastChargeback  *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=last_chargeback,json=lastChargeback" json:"last_chargeback,omitempty"`
	LastCredit      *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=last_credit,json=lastCredit" json:"last_credit,omitempty"`
	LastRefunded    *google_protobuf.Timestamp `protobuf:"bytes,14,opt,name=last_refunded,json=lastRefunded" json:"last_refunded,omitempty"`
	ChargebackCount int32                      `protobuf:"varint,15,opt,name=chargeback_count,json=chargebackCount" json:"chargeback_count,omitempty"`
	RefundCount     int32                      `protobuf:"varint,16,opt,name=refund_count,json=refundCount" json:"refund_count,omitempty"`
	PurchaseCount   int32                      `protobuf:"varint,17,opt,name=purchase_count,json=purchaseCount" json:"purchase_count,omitempty"`
	CreditCount     int32                      `protobuf:"varint,18,opt,name=credit_count,json=creditCount" json:"credit_count,omitempty"`
	DelinquentCount int32                      `protobuf:"varint,19,opt,name=delinquent_count,json=delinquentCount" json:"delinquent_count,omitempty"`
}

func (m *CustomerBilling) Reset()                    { *m = CustomerBilling{} }
func (m *CustomerBilling) String() string            { return proto.CompactTextString(m) }
func (*CustomerBilling) ProtoMessage()               {}
func (*CustomerBilling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CustomerBilling) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *CustomerBilling) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *CustomerBilling) GetIsDelinquent() string {
	if m != nil {
		return m.IsDelinquent
	}
	return ""
}

func (m *CustomerBilling) GetCurrentBalance() float64 {
	if m != nil {
		return m.CurrentBalance
	}
	return 0
}

func (m *CustomerBilling) GetTotalPaid() float64 {
	if m != nil {
		return m.TotalPaid
	}
	return 0
}

func (m *CustomerBilling) GetTotalRefunded() float64 {
	if m != nil {
		return m.TotalRefunded
	}
	return 0
}

func (m *CustomerBilling) GetTotalCredited() float64 {
	if m != nil {
		return m.TotalCredited
	}
	return 0
}

func (m *CustomerBilling) GetTotalChargeback() float64 {
	if m != nil {
		return m.TotalChargeback
	}
	return 0
}

func (m *CustomerBilling) GetDelinquentSince() *google_protobuf.Timestamp {
	if m != nil {
		return m.DelinquentSince
	}
	return nil
}

func (m *CustomerBilling) GetFirstPaid() *google_protobuf.Timestamp {
	if m != nil {
		return m.FirstPaid
	}
	return nil
}

func (m *CustomerBilling) GetLastPaid() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastPaid
	}
	return nil
}

func (m *CustomerBilling) GetLastChargeback() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastChargeback
	}
	return nil
}

func (m *CustomerBilling) GetLastCredit() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastCredit
	}
	return nil
}

func (m *CustomerBilling) GetLastRefunded() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastRefunded
	}
	return nil
}

func (m *CustomerBilling) GetChargebackCount() int32 {
	if m != nil {
		return m.ChargebackCount
	}
	return 0
}

func (m *CustomerBilling) GetRefundCount() int32 {
	if m != nil {
		return m.RefundCount
	}
	return 0
}

func (m *CustomerBilling) GetPurchaseCount() int32 {
	if m != nil {
		return m.PurchaseCount
	}
	return 0
}

func (m *CustomerBilling) GetCreditCount() int32 {
	if m != nil {
		return m.CreditCount
	}
	return 0
}

func (m *CustomerBilling) GetDelinquentCount() int32 {
	if m != nil {
		return m.DelinquentCount
	}
	return 0
}

type CustomerProductFeature struct {
	CustomerId  string                         `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	ProductCode string                         `protobuf:"bytes,2,opt,name=product_code,json=productCode" json:"product_code,omitempty"`
	FeatureCode string                         `protobuf:"bytes,3,opt,name=feature_code,json=featureCode" json:"feature_code,omitempty"`
	Status      fortifi_finance.PurchaseStatus `protobuf:"varint,4,opt,name=status,enum=fortifi.finance.PurchaseStatus" json:"status,omitempty"`
}

func (m *CustomerProductFeature) Reset()                    { *m = CustomerProductFeature{} }
func (m *CustomerProductFeature) String() string            { return proto.CompactTextString(m) }
func (*CustomerProductFeature) ProtoMessage()               {}
func (*CustomerProductFeature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CustomerProductFeature) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *CustomerProductFeature) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

func (m *CustomerProductFeature) GetFeatureCode() string {
	if m != nil {
		return m.FeatureCode
	}
	return ""
}

func (m *CustomerProductFeature) GetStatus() fortifi_finance.PurchaseStatus {
	if m != nil {
		return m.Status
	}
	return fortifi_finance.PurchaseStatus_UNKNOWN_PURCHASE_STATUS
}

type CustomerProducts struct {
	Products []*CustomerProductFeature `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *CustomerProducts) Reset()                    { *m = CustomerProducts{} }
func (m *CustomerProducts) String() string            { return proto.CompactTextString(m) }
func (*CustomerProducts) ProtoMessage()               {}
func (*CustomerProducts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CustomerProducts) GetProducts() []*CustomerProductFeature {
	if m != nil {
		return m.Products
	}
	return nil
}

func init() {
	proto.RegisterType((*Customer)(nil), "fortifi.customer.Customer")
	proto.RegisterType((*CustomerDates)(nil), "fortifi.customer.CustomerDates")
	proto.RegisterType((*CustomerFlags)(nil), "fortifi.customer.CustomerFlags")
	proto.RegisterType((*CustomerBilling)(nil), "fortifi.customer.CustomerBilling")
	proto.RegisterType((*CustomerProductFeature)(nil), "fortifi.customer.CustomerProductFeature")
	proto.RegisterType((*CustomerProducts)(nil), "fortifi.customer.CustomerProducts")
	proto.RegisterEnum("fortifi.customer.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("fortifi.customer.AccountStatus", AccountStatus_name, AccountStatus_value)
	proto.RegisterEnum("fortifi.customer.Lifecycle", Lifecycle_name, Lifecycle_value)
	proto.RegisterEnum("fortifi.customer.Orientation", Orientation_name, Orientation_value)
}

func init() { proto.RegisterFile("ftypes/customer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x8e, 0x6c, 0x4b, 0xa6, 0x86, 0xfa, 0x61, 0x36, 0xce, 0x09, 0x8f, 0xcf, 0xc9, 0x49, 0xe2,
	0x83, 0x83, 0xe3, 0xb8, 0x88, 0x0c, 0xb8, 0x40, 0x83, 0x20, 0x17, 0xa9, 0x4c, 0xad, 0x13, 0x22,
	0x32, 0xa5, 0x2e, 0x29, 0x37, 0xe9, 0x0d, 0xb1, 0x26, 0x57, 0xf2, 0x22, 0x14, 0xa9, 0xf2, 0x27,
	0x85, 0x7b, 0xd1, 0xd7, 0xe9, 0x2b, 0xf4, 0x09, 0xfa, 0x12, 0x7d, 0x86, 0x5e, 0xf6, 0xbe, 0xd8,
	0x5d, 0x52, 0x52, 0x9c, 0x26, 0xea, 0x9d, 0xe6, 0x9b, 0x6f, 0x86, 0xf3, 0x0d, 0x67, 0x96, 0x2b,
	0xb8, 0x3b, 0xcd, 0xaf, 0x17, 0x2c, 0x3b, 0x0e, 0x8a, 0x2c, 0x4f, 0xe6, 0x2c, 0xed, 0x2d, 0xd2,
	0x24, 0x4f, 0x90, 0x31, 0x4d, 0xd2, 0x9c, 0x4f, 0x79, 0xaf, 0xc2, 0xf7, 0x1f, 0xcc, 0x92, 0x64,
	0x16, 0xb1, 0x63, 0xe9, 0xbf, 0x2c, 0xa6, 0xc7, 0x39, 0x9f, 0xb3, 0x2c, 0xa7, 0xf3, 0x85, 0x0a,
	0xd9, 0xdf, 0x2b, 0x33, 0x4d, 0x79, 0x4c, 0xe3, 0x80, 0xdd, 0x40, 0xf3, 0x94, 0x4e, 0xa7, 0x3c,
	0x50, 0xe8, 0xc1, 0xcf, 0x75, 0xd0, 0xac, 0x32, 0x33, 0xea, 0xc0, 0x16, 0x0f, 0xcd, 0xda, 0xc3,
	0xda, 0x61, 0x93, 0x6c, 0xf1, 0x10, 0xfd, 0x13, 0xb4, 0xcb, 0x94, 0xc6, 0xa1, 0xcf, 0x43, 0x73,
	0x4b, 0xa2, 0xbb, 0xd2, 0xb6, 0x43, 0x74, 0x1f, 0x80, 0x06, 0x41, 0x52, 0xc4, 0xb9, 0x70, 0x6e,
	0x4b, 0x67, 0xb3, 0x44, 0xec, 0x10, 0x3d, 0x82, 0x56, 0xc8, 0xb3, 0x45, 0x44, 0xaf, 0xfd, 0x98,
	0xce, 0x99, 0xb9, 0x23, 0x09, 0x7a, 0x89, 0x39, 0x74, 0xce, 0xd0, 0x1e, 0xd4, 0xd9, 0x9c, 0xf2,
	0xc8, 0xac, 0x4b, 0x9f, 0x32, 0x04, 0xba, 0xb8, 0x4a, 0x62, 0x66, 0x36, 0x14, 0x2a, 0x0d, 0xb4,
	0x0f, 0x5a, 0x44, 0xe3, 0x59, 0x41, 0x67, 0xcc, 0xdc, 0x95, 0x8e, 0xa5, 0x2d, 0x7c, 0xa2, 0x01,
	0x3f, 0x8a, 0x20, 0x4d, 0xf9, 0x2a, 0x1b, 0x99, 0xb0, 0x2b, 0x2b, 0x4a, 0xaf, 0xcd, 0xa6, 0xaa,
	0xbf, 0x34, 0xd1, 0xd7, 0xd0, 0xaa, 0xea, 0x17, 0x6d, 0x31, 0xe1, 0x61, 0xed, 0xb0, 0x73, 0x72,
	0xbf, 0x77, 0xb3, 0xdb, 0xbd, 0xbe, 0x62, 0x79, 0xd7, 0x0b, 0x46, 0x74, 0xba, 0x32, 0xd0, 0x19,
	0x74, 0xaa, 0x0c, 0x59, 0x4e, 0xf3, 0x22, 0x33, 0x75, 0x99, 0xe3, 0xc1, 0x27, 0x73, 0xb8, 0x92,
	0x46, 0xda, 0x74, 0xdd, 0x44, 0xcf, 0xa0, 0x19, 0xf1, 0x29, 0x0b, 0xae, 0x83, 0x88, 0x99, 0x2d,
	0x99, 0xe2, 0x5f, 0x1f, 0xa7, 0x18, 0x56, 0x14, 0xb2, 0x62, 0xa3, 0x17, 0xa0, 0x27, 0x29, 0x67,
	0x71, 0x4e, 0x73, 0x9e, 0xc4, 0x66, 0xfb, 0x53, 0x1a, 0x46, 0x2b, 0x12, 0x59, 0x8f, 0x40, 0xff,
	0x83, 0xce, 0x82, 0xa6, 0x2c, 0xce, 0xfd, 0xb2, 0x26, 0xb3, 0x23, 0xdb, 0xd4, 0x56, 0x68, 0x59,
	0x37, 0x7a, 0x0a, 0x8d, 0x2c, 0x29, 0xd2, 0x80, 0x99, 0xdd, 0x1b, 0x12, 0xab, 0x61, 0xb2, 0xe8,
	0x7c, 0x41, 0xf9, 0x2c, 0x3e, 0x67, 0x21, 0x2f, 0xe6, 0xa4, 0xa4, 0x8b, 0x31, 0x50, 0xbf, 0xfc,
	0xf7, 0x34, 0x2a, 0x98, 0x69, 0xa8, 0x31, 0x50, 0xd8, 0x85, 0x80, 0xd0, 0xff, 0xa1, 0x5b, 0xb5,
	0x71, 0x4e, 0x63, 0x3a, 0x63, 0xa9, 0x79, 0x5b, 0xb2, 0xaa, 0xee, 0x9e, 0x2b, 0xf4, 0xe0, 0xd7,
	0x2d, 0x68, 0x57, 0x93, 0x3a, 0xa0, 0x39, 0xcb, 0xd0, 0x03, 0xd0, 0x2b, 0x89, 0xfe, 0x72, 0x6e,
	0xa1, 0x82, 0xec, 0x10, 0x9d, 0x40, 0x23, 0x59, 0xb0, 0x98, 0xa9, 0xe9, 0xd5, 0x4f, 0xf6, 0x7b,
	0x6a, 0x75, 0x7a, 0xd5, 0xea, 0xf4, 0xbc, 0x6a, 0x75, 0x48, 0xc9, 0x14, 0x31, 0x41, 0x94, 0x64,
	0x4c, 0x0d, 0xf5, 0x86, 0x18, 0xc5, 0x44, 0xcf, 0x41, 0xcf, 0x53, 0x4e, 0x23, 0x31, 0x08, 0x69,
	0x2e, 0x87, 0xfd, 0xf3, 0x81, 0x20, 0xe9, 0xae, 0x60, 0xa3, 0xa7, 0xd0, 0x54, 0xc1, 0x2c, 0x0e,
	0xe5, 0x2e, 0x7c, 0x3e, 0x54, 0x93, 0x64, 0x1c, 0x87, 0xe8, 0x2b, 0xd0, 0x52, 0x56, 0xea, 0x6b,
	0x6c, 0x8e, 0xab, 0xb8, 0x07, 0xbf, 0xad, 0x35, 0xf2, 0x2c, 0xa2, 0xb3, 0xbf, 0xd1, 0xc8, 0x3d,
	0xa8, 0x47, 0xc9, 0x35, 0x8d, 0x64, 0x1f, 0x35, 0xa2, 0x0c, 0x64, 0xc0, 0xf6, 0x7b, 0x1e, 0xc8,
	0x3e, 0x69, 0x44, 0xfc, 0x14, 0xbc, 0x69, 0x4a, 0x8b, 0x50, 0xb6, 0x40, 0x23, 0xca, 0x40, 0xff,
	0x01, 0x08, 0xae, 0x68, 0x3a, 0x63, 0x97, 0x34, 0x78, 0x27, 0x25, 0x6a, 0x64, 0x0d, 0x11, 0x1b,
	0x1c, 0xf2, 0x4c, 0xcd, 0x5f, 0x43, 0x7a, 0x97, 0xb6, 0xd8, 0x60, 0x3e, 0x5f, 0x14, 0x51, 0xa6,
	0x16, 0x5f, 0x23, 0x95, 0x29, 0x66, 0x2b, 0x67, 0xd9, 0x6a, 0x72, 0x35, 0xe9, 0xd6, 0x05, 0x56,
	0xcd, 0xed, 0x7f, 0xa1, 0x7d, 0x45, 0x33, 0x7f, 0x51, 0xa4, 0xc1, 0x15, 0x15, 0xaf, 0xb4, 0x29,
	0x39, 0xad, 0x2b, 0x9a, 0x8d, 0x2b, 0x4c, 0x3c, 0x21, 0x65, 0x31, 0xfb, 0x81, 0x85, 0xf2, 0x10,
	0xd0, 0x48, 0x65, 0x8a, 0xba, 0xe4, 0x4f, 0x1e, 0xcf, 0xe4, 0x6e, 0x6b, 0x64, 0x69, 0xa3, 0x7b,
	0xb0, 0x4b, 0x73, 0x3f, 0xe5, 0xd9, 0x3b, 0xb9, 0xb3, 0x1a, 0x69, 0xd0, 0x9c, 0xf0, 0xec, 0xdd,
	0xc1, 0x1f, 0x0d, 0xe8, 0x56, 0xdd, 0x3d, 0xe5, 0x51, 0x24, 0xc8, 0x1b, 0xfb, 0xbb, 0x0f, 0x5a,
	0x50, 0xa4, 0x29, 0x8b, 0x83, 0xeb, 0xf2, 0xa0, 0x5d, 0xda, 0x42, 0x04, 0xcf, 0xfc, 0x90, 0x45,
	0x3c, 0xfe, 0xbe, 0x60, 0x71, 0x5e, 0x1e, 0xb6, 0x2d, 0x9e, 0x0d, 0x96, 0x98, 0xd8, 0x22, 0x15,
	0x90, 0xfb, 0x97, 0x34, 0x12, 0xa7, 0xbe, 0x7c, 0x05, 0x35, 0xd2, 0x29, 0xe1, 0x53, 0x85, 0x8a,
	0x73, 0x3b, 0x4f, 0x72, 0x1a, 0xf9, 0x0b, 0xca, 0xd5, 0xb8, 0xd5, 0x48, 0x53, 0x22, 0x63, 0xca,
	0x43, 0x71, 0x20, 0x28, 0x77, 0xca, 0xa6, 0x45, 0x1c, 0x96, 0x93, 0x55, 0x23, 0x6d, 0x89, 0x92,
	0x12, 0x5c, 0xd1, 0x82, 0x94, 0x85, 0x3c, 0x67, 0xa1, 0x7c, 0x39, 0x15, 0xcd, 0x2a, 0x41, 0xf4,
	0x18, 0x8c, 0x92, 0xb6, 0x7a, 0xfd, 0x9a, 0x24, 0x76, 0x15, 0x71, 0x35, 0x03, 0x18, 0x8c, 0x95,
	0x44, 0x3f, 0xe3, 0x42, 0x41, 0x73, 0xe3, 0x50, 0x77, 0x57, 0x31, 0xae, 0x08, 0x41, 0xcf, 0x00,
	0xa6, 0x3c, 0xcd, 0x72, 0x25, 0x0f, 0x36, 0x26, 0x68, 0x4a, 0xb6, 0x94, 0xfe, 0x14, 0x9a, 0x11,
	0xad, 0x22, 0xf5, 0xcd, 0xfb, 0x24, 0xc8, 0x32, 0xd0, 0x82, 0xae, 0x0c, 0x5c, 0x13, 0xd9, 0xda,
	0x18, 0xde, 0x11, 0x21, 0x6b, 0xfa, 0x9f, 0x83, 0xae, 0x92, 0xc8, 0xde, 0xc9, 0xa3, 0x7c, 0xc3,
	0x11, 0x22, 0x13, 0x48, 0x36, 0x7a, 0x01, 0x6d, 0x19, 0xbc, 0x7c, 0x69, 0x9d, 0x8d, 0xe1, 0x2d,
	0x11, 0xb0, 0x7c, 0x9f, 0x8f, 0xc1, 0x58, 0x55, 0xef, 0xab, 0x7d, 0x12, 0x47, 0x7d, 0x9d, 0x74,
	0x57, 0xb8, 0x25, 0x77, 0xea, 0x11, 0xb4, 0xd4, 0x63, 0x4a, 0x9a, 0x21, 0x69, 0xba, 0xc2, 0x14,
	0x45, 0x7c, 0x55, 0xca, 0xf5, 0x2a, 0x49, 0xb7, 0x25, 0xa9, 0x5d, 0xa1, 0xcb, 0x4c, 0x4a, 0x6d,
	0x49, 0x42, 0x2a, 0x93, 0xc2, 0x14, 0xe5, 0xf1, 0x07, 0x53, 0xa1, 0x68, 0x77, 0x54, 0x5d, 0x2b,
	0x5c, 0x52, 0x0f, 0x7e, 0xa9, 0xc1, 0x3f, 0xaa, 0xbd, 0x1b, 0xa7, 0x49, 0x58, 0x04, 0xf9, 0x19,
	0xa3, 0x79, 0x91, 0xb2, 0xcd, 0xeb, 0xf7, 0x08, 0x5a, 0x0b, 0x15, 0xe2, 0x07, 0x49, 0xc8, 0xca,
	0x15, 0xd4, 0x4b, 0xcc, 0x4a, 0x42, 0x79, 0xda, 0x4c, 0x55, 0x3a, 0x45, 0x51, 0x4b, 0xa8, 0x97,
	0x98, 0xa4, 0x88, 0xaf, 0xa4, 0xba, 0x08, 0xec, 0xdc, 0xf8, 0x4a, 0x56, 0x17, 0xb1, 0xea, 0xd0,
	0x29, 0x2f, 0x02, 0x25, 0xfd, 0xe0, 0x0d, 0x18, 0x37, 0x2a, 0xcf, 0xd0, 0x00, 0xb4, 0xf2, 0xf1,
	0x99, 0x59, 0x7b, 0xb8, 0x7d, 0xa8, 0x9f, 0x1c, 0x7e, 0xfc, 0x5d, 0xff, 0x6b, 0xbd, 0x64, 0x19,
	0x79, 0x14, 0x80, 0xbe, 0x76, 0x7f, 0x41, 0x3a, 0xec, 0x4e, 0x9c, 0xd7, 0xce, 0xe8, 0x5b, 0xc7,
	0xb8, 0x85, 0xba, 0xa0, 0x13, 0xec, 0xda, 0x03, 0xec, 0x78, 0x76, 0x7f, 0x68, 0xd4, 0x50, 0x0b,
	0xb4, 0xd3, 0x89, 0x6b, 0x3b, 0xd8, 0x75, 0x8d, 0x2d, 0xc1, 0x75, 0xbd, 0x89, 0xf0, 0x1a, 0xdb,
	0xa8, 0x03, 0x80, 0x1d, 0x0f, 0x93, 0x31, 0xb1, 0x5d, 0x6c, 0xec, 0x08, 0xa7, 0xf5, 0xaa, 0x4f,
	0x6c, 0xef, 0xad, 0x51, 0x3f, 0xfa, 0x09, 0xda, 0x1f, 0x5c, 0x70, 0x44, 0x66, 0xdb, 0xb1, 0x45,
	0x56, 0xdb, 0xc5, 0x03, 0xe3, 0x16, 0x6a, 0x42, 0xdd, 0xc5, 0xde, 0x64, 0x6c, 0xd4, 0x10, 0x40,
	0xa3, 0x6f, 0x79, 0xf6, 0x05, 0x36, 0xb6, 0x50, 0x1b, 0x9a, 0xee, 0xc4, 0x1d, 0x63, 0x67, 0x80,
	0x07, 0xc6, 0xb6, 0x48, 0x8a, 0xdf, 0x8c, 0x6d, 0x82, 0x07, 0xc6, 0x8e, 0xf0, 0x59, 0x7d, 0xc7,
	0xc2, 0xc3, 0x21, 0x1e, 0x18, 0x75, 0x51, 0x5b, 0x9f, 0x58, 0xaf, 0xec, 0x0b, 0x3c, 0x30, 0x1a,
	0xc2, 0x1a, 0xe0, 0x21, 0xf6, 0x6c, 0xe7, 0xa5, 0xb1, 0x7b, 0xf4, 0x7b, 0x0d, 0x9a, 0xcb, 0xeb,
	0x11, 0xba, 0x0b, 0xb7, 0x4b, 0x8d, 0xfe, 0xd0, 0x3e, 0xc3, 0xd6, 0x5b, 0x6b, 0x88, 0x8d, 0x5b,
	0x48, 0x83, 0x1d, 0x6b, 0x34, 0x1c, 0x18, 0x35, 0xa1, 0xc5, 0x9d, 0x9c, 0xba, 0x16, 0xb1, 0x4f,
	0x31, 0x29, 0x85, 0x4e, 0xc6, 0xe3, 0x11, 0x11, 0x42, 0x35, 0xd8, 0x19, 0xe2, 0xbe, 0x28, 0xe0,
	0xdf, 0x60, 0x9e, 0xf7, 0xc9, 0x6b, 0xf9, 0x10, 0xff, 0x9b, 0x49, 0x7f, 0x68, 0x9f, 0xd9, 0x78,
	0xe0, 0x4b, 0x6f, 0x1d, 0x99, 0xb0, 0xe7, 0xf6, 0x87, 0xd8, 0xbd, 0xe9, 0x69, 0x08, 0xad, 0x1e,
	0x11, 0x0d, 0xdd, 0x15, 0xc9, 0xce, 0x08, 0xc6, 0x86, 0x26, 0x3a, 0x32, 0x92, 0x8f, 0x98, 0x38,
	0xa2, 0x67, 0x4d, 0xa1, 0xc0, 0x9a, 0xb8, 0xde, 0xe8, 0x1c, 0x13, 0x03, 0x44, 0x53, 0x94, 0x58,
	0x43, 0x17, 0xbf, 0x87, 0xfd, 0xb1, 0xe8, 0x5b, 0x4b, 0x56, 0x33, 0x72, 0x3d, 0xa3, 0x2d, 0x19,
	0xc3, 0x91, 0x40, 0x3b, 0x47, 0x17, 0xa0, 0xaf, 0x5d, 0xe8, 0xd0, 0x3d, 0xb8, 0x53, 0x09, 0x1e,
	0x11, 0x1b, 0x3b, 0x5e, 0xdf, 0xb3, 0x47, 0x4e, 0x25, 0xd9, 0xf5, 0x8c, 0x9a, 0xa8, 0xe9, 0xa2,
	0x3f, 0x9c, 0x88, 0x9e, 0x77, 0x00, 0x3c, 0x6c, 0xbd, 0x72, 0x46, 0xc3, 0xd1, 0xcb, 0xb7, 0xc6,
	0xb6, 0x70, 0x9d, 0x92, 0xbe, 0x33, 0x30, 0x76, 0x4e, 0x9f, 0x7c, 0xf7, 0xc5, 0x8c, 0xe7, 0x57,
	0xc5, 0x65, 0x2f, 0x48, 0xe6, 0xc7, 0xe5, 0xb0, 0xa9, 0x7f, 0x19, 0x4f, 0x66, 0xc9, 0xf1, 0x8d,
	0xbf, 0x27, 0x97, 0x0d, 0xe9, 0xf9, 0xf2, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x66, 0xb1,
	0x91, 0xb8, 0x0c, 0x00, 0x00,
}
